{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Repos/datingApp/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _inherits from \"C:/Repos/datingApp/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Repos/datingApp/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"C:/Repos/datingApp/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Repos/datingApp/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as i0 from '@angular/core';\nimport { Directive, NgModule, InjectionToken, Injectable, Inject, SecurityContext, Component, HostBinding, HostListener } from '@angular/core';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { Subject } from 'rxjs';\nimport * as i3 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i2 from '@angular/platform-browser';\nvar _c0 = [\"toast-component\", \"\"];\n\nfunction Toast_button_0_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 5);\n    i0.ɵɵlistener(\"click\", function Toast_button_0_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      var ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.remove());\n    });\n    i0.ɵɵelementStart(1, \"span\", 6);\n    i0.ɵɵtext(2, \"\\xD7\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction Toast_div_1_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"[\", ctx_r7.duplicatesCount + 1, \"]\");\n  }\n}\n\nfunction Toast_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵtemplate(2, Toast_div_1_ng_container_2_Template, 2, 1, \"ng-container\", 4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r1.options.titleClass);\n    i0.ɵɵattribute(\"aria-label\", ctx_r1.title);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.title, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.duplicatesCount);\n  }\n}\n\nfunction Toast_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 7);\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r2.options.messageClass);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r2.message, i0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction Toast_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r3.options.messageClass);\n    i0.ɵɵattribute(\"aria-label\", ctx_r3.message);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.message, \" \");\n  }\n}\n\nfunction Toast_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"div\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"width\", ctx_r4.width + \"%\");\n  }\n}\n\nfunction ToastNoAnimation_button_0_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 5);\n    i0.ɵɵlistener(\"click\", function ToastNoAnimation_button_0_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      var ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.remove());\n    });\n    i0.ɵɵelementStart(1, \"span\", 6);\n    i0.ɵɵtext(2, \"\\xD7\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction ToastNoAnimation_div_1_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"[\", ctx_r7.duplicatesCount + 1, \"]\");\n  }\n}\n\nfunction ToastNoAnimation_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵtemplate(2, ToastNoAnimation_div_1_ng_container_2_Template, 2, 1, \"ng-container\", 4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r1.options.titleClass);\n    i0.ɵɵattribute(\"aria-label\", ctx_r1.title);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.title, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.duplicatesCount);\n  }\n}\n\nfunction ToastNoAnimation_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 7);\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r2.options.messageClass);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r2.message, i0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction ToastNoAnimation_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r3.options.messageClass);\n    i0.ɵɵattribute(\"aria-label\", ctx_r3.message);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.message, \" \");\n  }\n}\n\nfunction ToastNoAnimation_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"div\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"width\", ctx_r4.width + \"%\");\n  }\n}\n\nvar ToastContainerDirective = /*#__PURE__*/(function () {\n  var ToastContainerDirective = /*#__PURE__*/function () {\n    function ToastContainerDirective(el) {\n      _classCallCheck(this, ToastContainerDirective);\n\n      this.el = el;\n    }\n\n    _createClass(ToastContainerDirective, [{\n      key: \"getContainerElement\",\n      value: function getContainerElement() {\n        return this.el.nativeElement;\n      }\n    }]);\n\n    return ToastContainerDirective;\n  }();\n\n  ToastContainerDirective.ɵfac = function ToastContainerDirective_Factory(t) {\n    return new (t || ToastContainerDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  ToastContainerDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: ToastContainerDirective,\n    selectors: [[\"\", \"toastContainer\", \"\"]],\n    exportAs: [\"toastContainer\"]\n  });\n  return ToastContainerDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar ToastContainerModule = /*#__PURE__*/(function () {\n  var ToastContainerModule = /*#__PURE__*/_createClass(function ToastContainerModule() {\n    _classCallCheck(this, ToastContainerModule);\n  });\n\n  ToastContainerModule.ɵfac = function ToastContainerModule_Factory(t) {\n    return new (t || ToastContainerModule)();\n  };\n\n  ToastContainerModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ToastContainerModule\n  });\n  ToastContainerModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return ToastContainerModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\n\n\nvar ComponentPortal = /*#__PURE__*/function () {\n  function ComponentPortal(component, injector) {\n    _classCallCheck(this, ComponentPortal);\n\n    this.component = component;\n    this.injector = injector;\n  }\n  /** Attach this portal to a host. */\n\n\n  _createClass(ComponentPortal, [{\n    key: \"attach\",\n    value: function attach(host, newestOnTop) {\n      this._attachedHost = host;\n      return host.attach(this, newestOnTop);\n    }\n    /** Detach this portal from its host */\n\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      var host = this._attachedHost;\n\n      if (host) {\n        this._attachedHost = undefined;\n        return host.detach();\n      }\n    }\n    /** Whether this portal is attached to a host. */\n\n  }, {\n    key: \"isAttached\",\n    get: function get() {\n      return this._attachedHost != null;\n    }\n    /**\n     * Sets the PortalHost reference without performing `attach()`. This is used directly by\n     * the PortalHost when it is performing an `attach()` or `detach()`.\n     */\n\n  }, {\n    key: \"setAttachedHost\",\n    value: function setAttachedHost(host) {\n      this._attachedHost = host;\n    }\n  }]);\n\n  return ComponentPortal;\n}();\n/**\n * Partial implementation of PortalHost that only deals with attaching a\n * ComponentPortal\n */\n\n\nvar BasePortalHost = /*#__PURE__*/function () {\n  function BasePortalHost() {\n    _classCallCheck(this, BasePortalHost);\n  }\n\n  _createClass(BasePortalHost, [{\n    key: \"attach\",\n    value: function attach(portal, newestOnTop) {\n      this._attachedPortal = portal;\n      return this.attachComponentPortal(portal, newestOnTop);\n    }\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      if (this._attachedPortal) {\n        this._attachedPortal.setAttachedHost();\n      }\n\n      this._attachedPortal = undefined;\n\n      if (this._disposeFn) {\n        this._disposeFn();\n\n        this._disposeFn = undefined;\n      }\n    }\n  }, {\n    key: \"setDisposeFn\",\n    value: function setDisposeFn(fn) {\n      this._disposeFn = fn;\n    }\n  }]);\n\n  return BasePortalHost;\n}();\n/**\n * Everything a toast needs to launch\n */\n\n\nvar ToastPackage = /*#__PURE__*/function () {\n  function ToastPackage(toastId, config, message, title, toastType, toastRef) {\n    var _this = this;\n\n    _classCallCheck(this, ToastPackage);\n\n    this.toastId = toastId;\n    this.config = config;\n    this.message = message;\n    this.title = title;\n    this.toastType = toastType;\n    this.toastRef = toastRef;\n    this._onTap = new Subject();\n    this._onAction = new Subject();\n    this.toastRef.afterClosed().subscribe(function () {\n      _this._onAction.complete();\n\n      _this._onTap.complete();\n    });\n  }\n  /** Fired on click */\n\n\n  _createClass(ToastPackage, [{\n    key: \"triggerTap\",\n    value: function triggerTap() {\n      this._onTap.next();\n\n      if (this.config.tapToDismiss) {\n        this._onTap.complete();\n      }\n    }\n  }, {\n    key: \"onTap\",\n    value: function onTap() {\n      return this._onTap.asObservable();\n    }\n    /** available for use in custom toast */\n\n  }, {\n    key: \"triggerAction\",\n    value: function triggerAction(action) {\n      this._onAction.next(action);\n    }\n  }, {\n    key: \"onAction\",\n    value: function onAction() {\n      return this._onAction.asObservable();\n    }\n  }]);\n\n  return ToastPackage;\n}();\n\nvar DefaultNoComponentGlobalConfig = {\n  maxOpened: 0,\n  autoDismiss: false,\n  newestOnTop: true,\n  preventDuplicates: false,\n  countDuplicates: false,\n  resetTimeoutOnDuplicate: false,\n  includeTitleDuplicates: false,\n  iconClasses: {\n    error: 'toast-error',\n    info: 'toast-info',\n    success: 'toast-success',\n    warning: 'toast-warning'\n  },\n  // Individual\n  closeButton: false,\n  disableTimeOut: false,\n  timeOut: 5000,\n  extendedTimeOut: 1000,\n  enableHtml: false,\n  progressBar: false,\n  toastClass: 'ngx-toastr',\n  positionClass: 'toast-top-right',\n  titleClass: 'toast-title',\n  messageClass: 'toast-message',\n  easing: 'ease-in',\n  easeTime: 300,\n  tapToDismiss: true,\n  onActivateTick: false,\n  progressAnimation: 'decreasing',\n  payload: null\n};\nvar TOAST_CONFIG = new InjectionToken('ToastConfig');\n/**\n * Reference to a toast opened via the Toastr service.\n */\n\nvar ToastRef = /*#__PURE__*/function () {\n  function ToastRef(_overlayRef) {\n    _classCallCheck(this, ToastRef);\n\n    this._overlayRef = _overlayRef;\n    /** Count of duplicates of this toast */\n\n    this.duplicatesCount = 0;\n    /** Subject for notifying the user that the toast has finished closing. */\n\n    this._afterClosed = new Subject();\n    /** triggered when toast is activated */\n\n    this._activate = new Subject();\n    /** notifies the toast that it should close before the timeout */\n\n    this._manualClose = new Subject();\n    /** notifies the toast that it should reset the timeouts */\n\n    this._resetTimeout = new Subject();\n    /** notifies the toast that it should count a duplicate toast */\n\n    this._countDuplicate = new Subject();\n  }\n\n  _createClass(ToastRef, [{\n    key: \"manualClose\",\n    value: function manualClose() {\n      this._manualClose.next();\n\n      this._manualClose.complete();\n    }\n  }, {\n    key: \"manualClosed\",\n    value: function manualClosed() {\n      return this._manualClose.asObservable();\n    }\n  }, {\n    key: \"timeoutReset\",\n    value: function timeoutReset() {\n      return this._resetTimeout.asObservable();\n    }\n  }, {\n    key: \"countDuplicate\",\n    value: function countDuplicate() {\n      return this._countDuplicate.asObservable();\n    }\n    /**\n     * Close the toast.\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      this._overlayRef.detach();\n\n      this._afterClosed.next();\n\n      this._manualClose.next();\n\n      this._afterClosed.complete();\n\n      this._manualClose.complete();\n\n      this._activate.complete();\n\n      this._resetTimeout.complete();\n\n      this._countDuplicate.complete();\n    }\n    /** Gets an observable that is notified when the toast is finished closing. */\n\n  }, {\n    key: \"afterClosed\",\n    value: function afterClosed() {\n      return this._afterClosed.asObservable();\n    }\n  }, {\n    key: \"isInactive\",\n    value: function isInactive() {\n      return this._activate.isStopped;\n    }\n  }, {\n    key: \"activate\",\n    value: function activate() {\n      this._activate.next();\n\n      this._activate.complete();\n    }\n    /** Gets an observable that is notified when the toast has started opening. */\n\n  }, {\n    key: \"afterActivate\",\n    value: function afterActivate() {\n      return this._activate.asObservable();\n    }\n    /** Reset the toast timouts and count duplicates */\n\n  }, {\n    key: \"onDuplicate\",\n    value: function onDuplicate(resetTimeout, countDuplicate) {\n      if (resetTimeout) {\n        this._resetTimeout.next();\n      }\n\n      if (countDuplicate) {\n        this._countDuplicate.next(++this.duplicatesCount);\n      }\n    }\n  }]);\n\n  return ToastRef;\n}();\n/** Custom injector type specifically for instantiating components with a toast. */\n\n\nvar ToastInjector = /*#__PURE__*/function () {\n  function ToastInjector(_toastPackage, _parentInjector) {\n    _classCallCheck(this, ToastInjector);\n\n    this._toastPackage = _toastPackage;\n    this._parentInjector = _parentInjector;\n  }\n\n  _createClass(ToastInjector, [{\n    key: \"get\",\n    value: function get(token, notFoundValue, flags) {\n      if (token === ToastPackage) {\n        return this._toastPackage;\n      }\n\n      return this._parentInjector.get(token, notFoundValue, flags);\n    }\n  }]);\n\n  return ToastInjector;\n}();\n/**\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n *\n * This is the only part of the portal core that directly touches the DOM.\n */\n\n\nvar DomPortalHost = /*#__PURE__*/function (_BasePortalHost) {\n  _inherits(DomPortalHost, _BasePortalHost);\n\n  var _super = _createSuper(DomPortalHost);\n\n  function DomPortalHost(_hostDomElement, _componentFactoryResolver, _appRef) {\n    var _this2;\n\n    _classCallCheck(this, DomPortalHost);\n\n    _this2 = _super.call(this);\n    _this2._hostDomElement = _hostDomElement;\n    _this2._componentFactoryResolver = _componentFactoryResolver;\n    _this2._appRef = _appRef;\n    return _this2;\n  }\n  /**\n   * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n   * @param portal Portal to be attached\n   */\n\n\n  _createClass(DomPortalHost, [{\n    key: \"attachComponentPortal\",\n    value: function attachComponentPortal(portal, newestOnTop) {\n      var _this3 = this;\n\n      var componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n\n      var componentRef; // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n      // for the component (in terms of Angular's component tree, not rendering).\n      // When the ViewContainerRef is missing, we use the factory to create the component directly\n      // and then manually attach the ChangeDetector for that component to the application (which\n      // happens automatically when using a ViewContainer).\n\n      componentRef = componentFactory.create(portal.injector); // When creating a component outside of a ViewContainer, we need to manually register\n      // its ChangeDetector with the application. This API is unfortunately not yet published\n      // in Angular core. The change detector must also be deregistered when the component\n      // is destroyed to prevent memory leaks.\n\n      this._appRef.attachView(componentRef.hostView);\n\n      this.setDisposeFn(function () {\n        _this3._appRef.detachView(componentRef.hostView);\n\n        componentRef.destroy();\n      }); // At this point the component has been instantiated, so we move it to the location in the DOM\n      // where we want it to be rendered.\n\n      if (newestOnTop) {\n        this._hostDomElement.insertBefore(this._getComponentRootNode(componentRef), this._hostDomElement.firstChild);\n      } else {\n        this._hostDomElement.appendChild(this._getComponentRootNode(componentRef));\n      }\n\n      return componentRef;\n    }\n    /** Gets the root HTMLElement for an instantiated component. */\n\n  }, {\n    key: \"_getComponentRootNode\",\n    value: function _getComponentRootNode(componentRef) {\n      return componentRef.hostView.rootNodes[0];\n    }\n  }]);\n\n  return DomPortalHost;\n}(BasePortalHost);\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\n\n\nvar OverlayRef = /*#__PURE__*/function () {\n  function OverlayRef(_portalHost) {\n    _classCallCheck(this, OverlayRef);\n\n    this._portalHost = _portalHost;\n  }\n\n  _createClass(OverlayRef, [{\n    key: \"attach\",\n    value: function attach(portal) {\n      var newestOnTop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      return this._portalHost.attach(portal, newestOnTop);\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @returns Resolves when the overlay has been detached.\n     */\n\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      return this._portalHost.detach();\n    }\n  }]);\n\n  return OverlayRef;\n}();\n/** Container inside which all toasts will render. */\n\n\nvar OverlayContainer = /*#__PURE__*/(function () {\n  var OverlayContainer = /*#__PURE__*/function () {\n    function OverlayContainer(_document) {\n      _classCallCheck(this, OverlayContainer);\n\n      this._document = _document;\n    }\n\n    _createClass(OverlayContainer, [{\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        if (this._containerElement && this._containerElement.parentNode) {\n          this._containerElement.parentNode.removeChild(this._containerElement);\n        }\n      }\n      /**\n       * This method returns the overlay container element. It will lazily\n       * create the element the first time  it is called to facilitate using\n       * the container in non-browser environments.\n       * @returns the container element\n       */\n\n    }, {\n      key: \"getContainerElement\",\n      value: function getContainerElement() {\n        if (!this._containerElement) {\n          this._createContainer();\n        }\n\n        return this._containerElement;\n      }\n      /**\n       * Create the overlay container element, which is simply a div\n       * with the 'cdk-overlay-container' class on the document body\n       * and 'aria-live=\"polite\"'\n       */\n\n    }, {\n      key: \"_createContainer\",\n      value: function _createContainer() {\n        var container = this._document.createElement('div');\n\n        container.classList.add('overlay-container');\n        container.setAttribute('aria-live', 'polite');\n\n        this._document.body.appendChild(container);\n\n        this._containerElement = container;\n      }\n    }]);\n\n    return OverlayContainer;\n  }();\n\n  OverlayContainer.ɵfac = function OverlayContainer_Factory(t) {\n    return new (t || OverlayContainer)(i0.ɵɵinject(DOCUMENT));\n  };\n\n  OverlayContainer.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: OverlayContainer,\n    factory: OverlayContainer.ɵfac,\n    providedIn: 'root'\n  });\n  return OverlayContainer;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\n\n\nvar Overlay = /*#__PURE__*/(function () {\n  var Overlay = /*#__PURE__*/function () {\n    function Overlay(_overlayContainer, _componentFactoryResolver, _appRef, _document) {\n      _classCallCheck(this, Overlay);\n\n      this._overlayContainer = _overlayContainer;\n      this._componentFactoryResolver = _componentFactoryResolver;\n      this._appRef = _appRef;\n      this._document = _document; // Namespace panes by overlay container\n\n      this._paneElements = new Map();\n    }\n    /**\n     * Creates an overlay.\n     * @returns A reference to the created overlay.\n     */\n\n\n    _createClass(Overlay, [{\n      key: \"create\",\n      value: function create(positionClass, overlayContainer) {\n        // get existing pane if possible\n        return this._createOverlayRef(this.getPaneElement(positionClass, overlayContainer));\n      }\n    }, {\n      key: \"getPaneElement\",\n      value: function getPaneElement() {\n        var positionClass = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n        var overlayContainer = arguments.length > 1 ? arguments[1] : undefined;\n\n        if (!this._paneElements.get(overlayContainer)) {\n          this._paneElements.set(overlayContainer, {});\n        }\n\n        if (!this._paneElements.get(overlayContainer)[positionClass]) {\n          this._paneElements.get(overlayContainer)[positionClass] = this._createPaneElement(positionClass, overlayContainer);\n        }\n\n        return this._paneElements.get(overlayContainer)[positionClass];\n      }\n      /**\n       * Creates the DOM element for an overlay and appends it to the overlay container.\n       * @returns Newly-created pane element\n       */\n\n    }, {\n      key: \"_createPaneElement\",\n      value: function _createPaneElement(positionClass, overlayContainer) {\n        var pane = this._document.createElement('div');\n\n        pane.id = 'toast-container';\n        pane.classList.add(positionClass);\n        pane.classList.add('toast-container');\n\n        if (!overlayContainer) {\n          this._overlayContainer.getContainerElement().appendChild(pane);\n        } else {\n          overlayContainer.getContainerElement().appendChild(pane);\n        }\n\n        return pane;\n      }\n      /**\n       * Create a DomPortalHost into which the overlay content can be loaded.\n       * @param pane The DOM element to turn into a portal host.\n       * @returns A portal host for the given DOM element.\n       */\n\n    }, {\n      key: \"_createPortalHost\",\n      value: function _createPortalHost(pane) {\n        return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef);\n      }\n      /**\n       * Creates an OverlayRef for an overlay in the given DOM element.\n       * @param pane DOM element for the overlay\n       */\n\n    }, {\n      key: \"_createOverlayRef\",\n      value: function _createOverlayRef(pane) {\n        return new OverlayRef(this._createPortalHost(pane));\n      }\n    }]);\n\n    return Overlay;\n  }();\n\n  Overlay.ɵfac = function Overlay_Factory(t) {\n    return new (t || Overlay)(i0.ɵɵinject(OverlayContainer), i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(i0.ApplicationRef), i0.ɵɵinject(DOCUMENT));\n  };\n\n  Overlay.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: Overlay,\n    factory: Overlay.ɵfac,\n    providedIn: 'root'\n  });\n  return Overlay;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar ToastrService = /*#__PURE__*/(function () {\n  var ToastrService = /*#__PURE__*/function () {\n    function ToastrService(token, overlay, _injector, sanitizer, ngZone) {\n      _classCallCheck(this, ToastrService);\n\n      this.overlay = overlay;\n      this._injector = _injector;\n      this.sanitizer = sanitizer;\n      this.ngZone = ngZone;\n      this.currentlyActive = 0;\n      this.toasts = [];\n      this.index = 0;\n      this.toastrConfig = Object.assign(Object.assign({}, token.default), token.config);\n\n      if (token.config.iconClasses) {\n        this.toastrConfig.iconClasses = Object.assign(Object.assign({}, token.default.iconClasses), token.config.iconClasses);\n      }\n    }\n    /** show toast */\n\n\n    _createClass(ToastrService, [{\n      key: \"show\",\n      value: function show(message, title) {\n        var override = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n      }\n      /** show successful toast */\n\n    }, {\n      key: \"success\",\n      value: function success(message, title) {\n        var override = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        var type = this.toastrConfig.iconClasses.success || '';\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n      }\n      /** show error toast */\n\n    }, {\n      key: \"error\",\n      value: function error(message, title) {\n        var override = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        var type = this.toastrConfig.iconClasses.error || '';\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n      }\n      /** show info toast */\n\n    }, {\n      key: \"info\",\n      value: function info(message, title) {\n        var override = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        var type = this.toastrConfig.iconClasses.info || '';\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n      }\n      /** show warning toast */\n\n    }, {\n      key: \"warning\",\n      value: function warning(message, title) {\n        var override = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        var type = this.toastrConfig.iconClasses.warning || '';\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n      }\n      /**\n       * Remove all or a single toast by id\n       */\n\n    }, {\n      key: \"clear\",\n      value: function clear(toastId) {\n        // Call every toastRef manualClose function\n        var _iterator = _createForOfIteratorHelper(this.toasts),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var toast = _step.value;\n\n            if (toastId !== undefined) {\n              if (toast.toastId === toastId) {\n                toast.toastRef.manualClose();\n                return;\n              }\n            } else {\n              toast.toastRef.manualClose();\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n      /**\n       * Remove and destroy a single toast by id\n       */\n\n    }, {\n      key: \"remove\",\n      value: function remove(toastId) {\n        var found = this._findToast(toastId);\n\n        if (!found) {\n          return false;\n        }\n\n        found.activeToast.toastRef.close();\n        this.toasts.splice(found.index, 1);\n        this.currentlyActive = this.currentlyActive - 1;\n\n        if (!this.toastrConfig.maxOpened || !this.toasts.length) {\n          return false;\n        }\n\n        if (this.currentlyActive < this.toastrConfig.maxOpened && this.toasts[this.currentlyActive]) {\n          var p = this.toasts[this.currentlyActive].toastRef;\n\n          if (!p.isInactive()) {\n            this.currentlyActive = this.currentlyActive + 1;\n            p.activate();\n          }\n        }\n\n        return true;\n      }\n      /**\n       * Determines if toast message is already shown\n       */\n\n    }, {\n      key: \"findDuplicate\",\n      value: function findDuplicate() {\n        var title = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n        var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n        var resetOnDuplicate = arguments.length > 2 ? arguments[2] : undefined;\n        var countDuplicates = arguments.length > 3 ? arguments[3] : undefined;\n        var includeTitleDuplicates = this.toastrConfig.includeTitleDuplicates;\n\n        var _iterator2 = _createForOfIteratorHelper(this.toasts),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var toast = _step2.value;\n            var hasDuplicateTitle = includeTitleDuplicates && toast.title === title;\n\n            if ((!includeTitleDuplicates || hasDuplicateTitle) && toast.message === message) {\n              toast.toastRef.onDuplicate(resetOnDuplicate, countDuplicates);\n              return toast;\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        return null;\n      }\n      /** create a clone of global config and apply individual settings */\n\n    }, {\n      key: \"applyConfig\",\n      value: function applyConfig() {\n        var override = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return Object.assign(Object.assign({}, this.toastrConfig), override);\n      }\n      /**\n       * Find toast object by id\n       */\n\n    }, {\n      key: \"_findToast\",\n      value: function _findToast(toastId) {\n        for (var i = 0; i < this.toasts.length; i++) {\n          if (this.toasts[i].toastId === toastId) {\n            return {\n              index: i,\n              activeToast: this.toasts[i]\n            };\n          }\n        }\n\n        return null;\n      }\n      /**\n       * Determines the need to run inside angular's zone then builds the toast\n       */\n\n    }, {\n      key: \"_preBuildNotification\",\n      value: function _preBuildNotification(toastType, message, title, config) {\n        var _this4 = this;\n\n        if (config.onActivateTick) {\n          return this.ngZone.run(function () {\n            return _this4._buildNotification(toastType, message, title, config);\n          });\n        }\n\n        return this._buildNotification(toastType, message, title, config);\n      }\n      /**\n       * Creates and attaches toast data to component\n       * returns the active toast, or in case preventDuplicates is enabled the original/non-duplicate active toast.\n       */\n\n    }, {\n      key: \"_buildNotification\",\n      value: function _buildNotification(toastType, message, title, config) {\n        if (!config.toastComponent) {\n          throw new Error('toastComponent required');\n        } // max opened and auto dismiss = true\n        // if timeout = 0 resetting it would result in setting this.hideTime = Date.now(). Hence, we only want to reset timeout if there is\n        // a timeout at all\n\n\n        var duplicate = this.findDuplicate(title, message, this.toastrConfig.resetTimeoutOnDuplicate && config.timeOut > 0, this.toastrConfig.countDuplicates);\n\n        if ((this.toastrConfig.includeTitleDuplicates && title || message) && this.toastrConfig.preventDuplicates && duplicate !== null) {\n          return duplicate;\n        }\n\n        this.previousToastMessage = message;\n        var keepInactive = false;\n\n        if (this.toastrConfig.maxOpened && this.currentlyActive >= this.toastrConfig.maxOpened) {\n          keepInactive = true;\n\n          if (this.toastrConfig.autoDismiss) {\n            this.clear(this.toasts[0].toastId);\n          }\n        }\n\n        var overlayRef = this.overlay.create(config.positionClass, this.overlayContainer);\n        this.index = this.index + 1;\n        var sanitizedMessage = message;\n\n        if (message && config.enableHtml) {\n          sanitizedMessage = this.sanitizer.sanitize(SecurityContext.HTML, message);\n        }\n\n        var toastRef = new ToastRef(overlayRef);\n        var toastPackage = new ToastPackage(this.index, config, sanitizedMessage, title, toastType, toastRef);\n        var toastInjector = new ToastInjector(toastPackage, this._injector);\n        var component = new ComponentPortal(config.toastComponent, toastInjector);\n        var portal = overlayRef.attach(component, this.toastrConfig.newestOnTop);\n        toastRef.componentInstance = portal.instance;\n        var ins = {\n          toastId: this.index,\n          title: title || '',\n          message: message || '',\n          toastRef: toastRef,\n          onShown: toastRef.afterActivate(),\n          onHidden: toastRef.afterClosed(),\n          onTap: toastPackage.onTap(),\n          onAction: toastPackage.onAction(),\n          portal: portal\n        };\n\n        if (!keepInactive) {\n          this.currentlyActive = this.currentlyActive + 1;\n          setTimeout(function () {\n            ins.toastRef.activate();\n          });\n        }\n\n        this.toasts.push(ins);\n        return ins;\n      }\n    }]);\n\n    return ToastrService;\n  }();\n\n  ToastrService.ɵfac = function ToastrService_Factory(t) {\n    return new (t || ToastrService)(i0.ɵɵinject(TOAST_CONFIG), i0.ɵɵinject(Overlay), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i2.DomSanitizer), i0.ɵɵinject(i0.NgZone));\n  };\n\n  ToastrService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ToastrService,\n    factory: ToastrService.ɵfac,\n    providedIn: 'root'\n  });\n  return ToastrService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar Toast = /*#__PURE__*/(function () {\n  var Toast = /*#__PURE__*/function () {\n    function Toast(toastrService, toastPackage, ngZone) {\n      var _this5 = this;\n\n      _classCallCheck(this, Toast);\n\n      this.toastrService = toastrService;\n      this.toastPackage = toastPackage;\n      this.ngZone = ngZone;\n      /** width of progress bar */\n\n      this.width = -1;\n      /** a combination of toast type and options.toastClass */\n\n      this.toastClasses = '';\n      /** controls animation */\n\n      this.state = {\n        value: 'inactive',\n        params: {\n          easeTime: this.toastPackage.config.easeTime,\n          easing: 'ease-in'\n        }\n      };\n      this.message = toastPackage.message;\n      this.title = toastPackage.title;\n      this.options = toastPackage.config;\n      this.originalTimeout = toastPackage.config.timeOut;\n      this.toastClasses = \"\".concat(toastPackage.toastType, \" \").concat(toastPackage.config.toastClass);\n      this.sub = toastPackage.toastRef.afterActivate().subscribe(function () {\n        _this5.activateToast();\n      });\n      this.sub1 = toastPackage.toastRef.manualClosed().subscribe(function () {\n        _this5.remove();\n      });\n      this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(function () {\n        _this5.resetTimeout();\n      });\n      this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(function (count) {\n        _this5.duplicatesCount = count;\n      });\n    }\n    /** hides component when waiting to be displayed */\n\n\n    _createClass(Toast, [{\n      key: \"displayStyle\",\n      get: function get() {\n        if (this.state.value === 'inactive') {\n          return 'none';\n        }\n\n        return;\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this.sub.unsubscribe();\n        this.sub1.unsubscribe();\n        this.sub2.unsubscribe();\n        this.sub3.unsubscribe();\n        clearInterval(this.intervalId);\n        clearTimeout(this.timeout);\n      }\n      /**\n       * activates toast and sets timeout\n       */\n\n    }, {\n      key: \"activateToast\",\n      value: function activateToast() {\n        var _this6 = this;\n\n        this.state = Object.assign(Object.assign({}, this.state), {\n          value: 'active'\n        });\n\n        if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') && this.options.timeOut) {\n          this.outsideTimeout(function () {\n            return _this6.remove();\n          }, this.options.timeOut);\n          this.hideTime = new Date().getTime() + this.options.timeOut;\n\n          if (this.options.progressBar) {\n            this.outsideInterval(function () {\n              return _this6.updateProgress();\n            }, 10);\n          }\n        }\n      }\n      /**\n       * updates progress bar width\n       */\n\n    }, {\n      key: \"updateProgress\",\n      value: function updateProgress() {\n        if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\n          return;\n        }\n\n        var now = new Date().getTime();\n        var remaining = this.hideTime - now;\n        this.width = remaining / this.options.timeOut * 100;\n\n        if (this.options.progressAnimation === 'increasing') {\n          this.width = 100 - this.width;\n        }\n\n        if (this.width <= 0) {\n          this.width = 0;\n        }\n\n        if (this.width >= 100) {\n          this.width = 100;\n        }\n      }\n    }, {\n      key: \"resetTimeout\",\n      value: function resetTimeout() {\n        var _this7 = this;\n\n        clearTimeout(this.timeout);\n        clearInterval(this.intervalId);\n        this.state = Object.assign(Object.assign({}, this.state), {\n          value: 'active'\n        });\n        this.outsideTimeout(function () {\n          return _this7.remove();\n        }, this.originalTimeout);\n        this.options.timeOut = this.originalTimeout;\n        this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n        this.width = -1;\n\n        if (this.options.progressBar) {\n          this.outsideInterval(function () {\n            return _this7.updateProgress();\n          }, 10);\n        }\n      }\n      /**\n       * tells toastrService to remove this toast after animation time\n       */\n\n    }, {\n      key: \"remove\",\n      value: function remove() {\n        var _this8 = this;\n\n        if (this.state.value === 'removed') {\n          return;\n        }\n\n        clearTimeout(this.timeout);\n        this.state = Object.assign(Object.assign({}, this.state), {\n          value: 'removed'\n        });\n        this.outsideTimeout(function () {\n          return _this8.toastrService.remove(_this8.toastPackage.toastId);\n        }, +this.toastPackage.config.easeTime);\n      }\n    }, {\n      key: \"tapToast\",\n      value: function tapToast() {\n        if (this.state.value === 'removed') {\n          return;\n        }\n\n        this.toastPackage.triggerTap();\n\n        if (this.options.tapToDismiss) {\n          this.remove();\n        }\n      }\n    }, {\n      key: \"stickAround\",\n      value: function stickAround() {\n        if (this.state.value === 'removed') {\n          return;\n        }\n\n        clearTimeout(this.timeout);\n        this.options.timeOut = 0;\n        this.hideTime = 0; // disable progressBar\n\n        clearInterval(this.intervalId);\n        this.width = 0;\n      }\n    }, {\n      key: \"delayedHideToast\",\n      value: function delayedHideToast() {\n        var _this9 = this;\n\n        if (this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut' || this.options.extendedTimeOut === 0 || this.state.value === 'removed') {\n          return;\n        }\n\n        this.outsideTimeout(function () {\n          return _this9.remove();\n        }, this.options.extendedTimeOut);\n        this.options.timeOut = this.options.extendedTimeOut;\n        this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n        this.width = -1;\n\n        if (this.options.progressBar) {\n          this.outsideInterval(function () {\n            return _this9.updateProgress();\n          }, 10);\n        }\n      }\n    }, {\n      key: \"outsideTimeout\",\n      value: function outsideTimeout(func, timeout) {\n        var _this10 = this;\n\n        if (this.ngZone) {\n          this.ngZone.runOutsideAngular(function () {\n            return _this10.timeout = setTimeout(function () {\n              return _this10.runInsideAngular(func);\n            }, timeout);\n          });\n        } else {\n          this.timeout = setTimeout(function () {\n            return func();\n          }, timeout);\n        }\n      }\n    }, {\n      key: \"outsideInterval\",\n      value: function outsideInterval(func, timeout) {\n        var _this11 = this;\n\n        if (this.ngZone) {\n          this.ngZone.runOutsideAngular(function () {\n            return _this11.intervalId = setInterval(function () {\n              return _this11.runInsideAngular(func);\n            }, timeout);\n          });\n        } else {\n          this.intervalId = setInterval(function () {\n            return func();\n          }, timeout);\n        }\n      }\n    }, {\n      key: \"runInsideAngular\",\n      value: function runInsideAngular(func) {\n        if (this.ngZone) {\n          this.ngZone.run(function () {\n            return func();\n          });\n        } else {\n          func();\n        }\n      }\n    }]);\n\n    return Toast;\n  }();\n\n  Toast.ɵfac = function Toast_Factory(t) {\n    return new (t || Toast)(i0.ɵɵdirectiveInject(ToastrService), i0.ɵɵdirectiveInject(ToastPackage), i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n\n  Toast.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: Toast,\n    selectors: [[\"\", \"toast-component\", \"\"]],\n    hostVars: 5,\n    hostBindings: function Toast_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function Toast_click_HostBindingHandler() {\n          return ctx.tapToast();\n        })(\"mouseenter\", function Toast_mouseenter_HostBindingHandler() {\n          return ctx.stickAround();\n        })(\"mouseleave\", function Toast_mouseleave_HostBindingHandler() {\n          return ctx.delayedHideToast();\n        });\n      }\n\n      if (rf & 2) {\n        i0.ɵɵsyntheticHostProperty(\"@flyInOut\", ctx.state);\n        i0.ɵɵclassMap(ctx.toastClasses);\n        i0.ɵɵstyleProp(\"display\", ctx.displayStyle);\n      }\n    },\n    attrs: _c0,\n    decls: 5,\n    vars: 5,\n    consts: [[\"type\", \"button\", \"class\", \"toast-close-button\", \"aria-label\", \"Close\", 3, \"click\", 4, \"ngIf\"], [3, \"class\", 4, \"ngIf\"], [\"role\", \"alert\", 3, \"class\", \"innerHTML\", 4, \"ngIf\"], [\"role\", \"alert\", 3, \"class\", 4, \"ngIf\"], [4, \"ngIf\"], [\"type\", \"button\", \"aria-label\", \"Close\", 1, \"toast-close-button\", 3, \"click\"], [\"aria-hidden\", \"true\"], [\"role\", \"alert\", 3, \"innerHTML\"], [\"role\", \"alert\"], [1, \"toast-progress\"]],\n    template: function Toast_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, Toast_button_0_Template, 3, 0, \"button\", 0);\n        i0.ɵɵtemplate(1, Toast_div_1_Template, 3, 5, \"div\", 1);\n        i0.ɵɵtemplate(2, Toast_div_2_Template, 1, 3, \"div\", 2);\n        i0.ɵɵtemplate(3, Toast_div_3_Template, 2, 4, \"div\", 3);\n        i0.ɵɵtemplate(4, Toast_div_4_Template, 2, 2, \"div\", 4);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.options.closeButton);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.title);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.message && ctx.options.enableHtml);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.message && !ctx.options.enableHtml);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.options.progressBar);\n      }\n    },\n    dependencies: [i3.NgIf],\n    encapsulation: 2,\n    data: {\n      animation: [trigger('flyInOut', [state('inactive', style({\n        opacity: 0\n      })), state('active', style({\n        opacity: 1\n      })), state('removed', style({\n        opacity: 0\n      })), transition('inactive => active', animate('{{ easeTime }}ms {{ easing }}')), transition('active => removed', animate('{{ easeTime }}ms {{ easing }}'))])]\n    }\n  });\n  return Toast;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar DefaultGlobalConfig = Object.assign(Object.assign({}, DefaultNoComponentGlobalConfig), {\n  toastComponent: Toast\n});\nvar ToastrModule = /*#__PURE__*/(function () {\n  var ToastrModule = /*#__PURE__*/function () {\n    function ToastrModule() {\n      _classCallCheck(this, ToastrModule);\n    }\n\n    _createClass(ToastrModule, null, [{\n      key: \"forRoot\",\n      value: function forRoot() {\n        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return {\n          ngModule: ToastrModule,\n          providers: [{\n            provide: TOAST_CONFIG,\n            useValue: {\n              default: DefaultGlobalConfig,\n              config: config\n            }\n          }]\n        };\n      }\n    }]);\n\n    return ToastrModule;\n  }();\n\n  ToastrModule.ɵfac = function ToastrModule_Factory(t) {\n    return new (t || ToastrModule)();\n  };\n\n  ToastrModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ToastrModule\n  });\n  ToastrModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule]\n  });\n  return ToastrModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar ToastrComponentlessModule = /*#__PURE__*/(function () {\n  var ToastrComponentlessModule = /*#__PURE__*/function () {\n    function ToastrComponentlessModule() {\n      _classCallCheck(this, ToastrComponentlessModule);\n    }\n\n    _createClass(ToastrComponentlessModule, null, [{\n      key: \"forRoot\",\n      value: function forRoot() {\n        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return {\n          ngModule: ToastrModule,\n          providers: [{\n            provide: TOAST_CONFIG,\n            useValue: {\n              default: DefaultNoComponentGlobalConfig,\n              config: config\n            }\n          }]\n        };\n      }\n    }]);\n\n    return ToastrComponentlessModule;\n  }();\n\n  ToastrComponentlessModule.ɵfac = function ToastrComponentlessModule_Factory(t) {\n    return new (t || ToastrComponentlessModule)();\n  };\n\n  ToastrComponentlessModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ToastrComponentlessModule\n  });\n  ToastrComponentlessModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule]\n  });\n  return ToastrComponentlessModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar ToastNoAnimation = /*#__PURE__*/(function () {\n  var ToastNoAnimation = /*#__PURE__*/function () {\n    function ToastNoAnimation(toastrService, toastPackage, appRef) {\n      var _this12 = this;\n\n      _classCallCheck(this, ToastNoAnimation);\n\n      this.toastrService = toastrService;\n      this.toastPackage = toastPackage;\n      this.appRef = appRef;\n      /** width of progress bar */\n\n      this.width = -1;\n      /** a combination of toast type and options.toastClass */\n\n      this.toastClasses = '';\n      /** controls animation */\n\n      this.state = 'inactive';\n      this.message = toastPackage.message;\n      this.title = toastPackage.title;\n      this.options = toastPackage.config;\n      this.originalTimeout = toastPackage.config.timeOut;\n      this.toastClasses = \"\".concat(toastPackage.toastType, \" \").concat(toastPackage.config.toastClass);\n      this.sub = toastPackage.toastRef.afterActivate().subscribe(function () {\n        _this12.activateToast();\n      });\n      this.sub1 = toastPackage.toastRef.manualClosed().subscribe(function () {\n        _this12.remove();\n      });\n      this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(function () {\n        _this12.resetTimeout();\n      });\n      this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(function (count) {\n        _this12.duplicatesCount = count;\n      });\n    }\n    /** hides component when waiting to be displayed */\n\n\n    _createClass(ToastNoAnimation, [{\n      key: \"displayStyle\",\n      get: function get() {\n        if (this.state === 'inactive') {\n          return 'none';\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this.sub.unsubscribe();\n        this.sub1.unsubscribe();\n        this.sub2.unsubscribe();\n        this.sub3.unsubscribe();\n        clearInterval(this.intervalId);\n        clearTimeout(this.timeout);\n      }\n      /**\n       * activates toast and sets timeout\n       */\n\n    }, {\n      key: \"activateToast\",\n      value: function activateToast() {\n        var _this13 = this;\n\n        this.state = 'active';\n\n        if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') && this.options.timeOut) {\n          this.timeout = setTimeout(function () {\n            _this13.remove();\n          }, this.options.timeOut);\n          this.hideTime = new Date().getTime() + this.options.timeOut;\n\n          if (this.options.progressBar) {\n            this.intervalId = setInterval(function () {\n              return _this13.updateProgress();\n            }, 10);\n          }\n        }\n\n        if (this.options.onActivateTick) {\n          this.appRef.tick();\n        }\n      }\n      /**\n       * updates progress bar width\n       */\n\n    }, {\n      key: \"updateProgress\",\n      value: function updateProgress() {\n        if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\n          return;\n        }\n\n        var now = new Date().getTime();\n        var remaining = this.hideTime - now;\n        this.width = remaining / this.options.timeOut * 100;\n\n        if (this.options.progressAnimation === 'increasing') {\n          this.width = 100 - this.width;\n        }\n\n        if (this.width <= 0) {\n          this.width = 0;\n        }\n\n        if (this.width >= 100) {\n          this.width = 100;\n        }\n      }\n    }, {\n      key: \"resetTimeout\",\n      value: function resetTimeout() {\n        var _this14 = this;\n\n        clearTimeout(this.timeout);\n        clearInterval(this.intervalId);\n        this.state = 'active';\n        this.options.timeOut = this.originalTimeout;\n        this.timeout = setTimeout(function () {\n          return _this14.remove();\n        }, this.originalTimeout);\n        this.hideTime = new Date().getTime() + (this.originalTimeout || 0);\n        this.width = -1;\n\n        if (this.options.progressBar) {\n          this.intervalId = setInterval(function () {\n            return _this14.updateProgress();\n          }, 10);\n        }\n      }\n      /**\n       * tells toastrService to remove this toast after animation time\n       */\n\n    }, {\n      key: \"remove\",\n      value: function remove() {\n        var _this15 = this;\n\n        if (this.state === 'removed') {\n          return;\n        }\n\n        clearTimeout(this.timeout);\n        this.state = 'removed';\n        this.timeout = setTimeout(function () {\n          return _this15.toastrService.remove(_this15.toastPackage.toastId);\n        });\n      }\n    }, {\n      key: \"tapToast\",\n      value: function tapToast() {\n        if (this.state === 'removed') {\n          return;\n        }\n\n        this.toastPackage.triggerTap();\n\n        if (this.options.tapToDismiss) {\n          this.remove();\n        }\n      }\n    }, {\n      key: \"stickAround\",\n      value: function stickAround() {\n        if (this.state === 'removed') {\n          return;\n        }\n\n        clearTimeout(this.timeout);\n        this.options.timeOut = 0;\n        this.hideTime = 0; // disable progressBar\n\n        clearInterval(this.intervalId);\n        this.width = 0;\n      }\n    }, {\n      key: \"delayedHideToast\",\n      value: function delayedHideToast() {\n        var _this16 = this;\n\n        if (this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut' || this.options.extendedTimeOut === 0 || this.state === 'removed') {\n          return;\n        }\n\n        this.timeout = setTimeout(function () {\n          return _this16.remove();\n        }, this.options.extendedTimeOut);\n        this.options.timeOut = this.options.extendedTimeOut;\n        this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n        this.width = -1;\n\n        if (this.options.progressBar) {\n          this.intervalId = setInterval(function () {\n            return _this16.updateProgress();\n          }, 10);\n        }\n      }\n    }]);\n\n    return ToastNoAnimation;\n  }();\n\n  ToastNoAnimation.ɵfac = function ToastNoAnimation_Factory(t) {\n    return new (t || ToastNoAnimation)(i0.ɵɵdirectiveInject(ToastrService), i0.ɵɵdirectiveInject(ToastPackage), i0.ɵɵdirectiveInject(i0.ApplicationRef));\n  };\n\n  ToastNoAnimation.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ToastNoAnimation,\n    selectors: [[\"\", \"toast-component\", \"\"]],\n    hostVars: 4,\n    hostBindings: function ToastNoAnimation_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function ToastNoAnimation_click_HostBindingHandler() {\n          return ctx.tapToast();\n        })(\"mouseenter\", function ToastNoAnimation_mouseenter_HostBindingHandler() {\n          return ctx.stickAround();\n        })(\"mouseleave\", function ToastNoAnimation_mouseleave_HostBindingHandler() {\n          return ctx.delayedHideToast();\n        });\n      }\n\n      if (rf & 2) {\n        i0.ɵɵclassMap(ctx.toastClasses);\n        i0.ɵɵstyleProp(\"display\", ctx.displayStyle);\n      }\n    },\n    attrs: _c0,\n    decls: 5,\n    vars: 5,\n    consts: [[\"type\", \"button\", \"class\", \"toast-close-button\", \"aria-label\", \"Close\", 3, \"click\", 4, \"ngIf\"], [3, \"class\", 4, \"ngIf\"], [\"role\", \"alert\", 3, \"class\", \"innerHTML\", 4, \"ngIf\"], [\"role\", \"alert\", 3, \"class\", 4, \"ngIf\"], [4, \"ngIf\"], [\"type\", \"button\", \"aria-label\", \"Close\", 1, \"toast-close-button\", 3, \"click\"], [\"aria-hidden\", \"true\"], [\"role\", \"alert\", 3, \"innerHTML\"], [\"role\", \"alert\"], [1, \"toast-progress\"]],\n    template: function ToastNoAnimation_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, ToastNoAnimation_button_0_Template, 3, 0, \"button\", 0);\n        i0.ɵɵtemplate(1, ToastNoAnimation_div_1_Template, 3, 5, \"div\", 1);\n        i0.ɵɵtemplate(2, ToastNoAnimation_div_2_Template, 1, 3, \"div\", 2);\n        i0.ɵɵtemplate(3, ToastNoAnimation_div_3_Template, 2, 4, \"div\", 3);\n        i0.ɵɵtemplate(4, ToastNoAnimation_div_4_Template, 2, 2, \"div\", 4);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.options.closeButton);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.title);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.message && ctx.options.enableHtml);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.message && !ctx.options.enableHtml);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.options.progressBar);\n      }\n    },\n    dependencies: [i3.NgIf],\n    encapsulation: 2\n  });\n  return ToastNoAnimation;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar DefaultNoAnimationsGlobalConfig = Object.assign(Object.assign({}, DefaultNoComponentGlobalConfig), {\n  toastComponent: ToastNoAnimation\n});\nvar ToastNoAnimationModule = /*#__PURE__*/(function () {\n  var ToastNoAnimationModule = /*#__PURE__*/function () {\n    function ToastNoAnimationModule() {\n      _classCallCheck(this, ToastNoAnimationModule);\n    }\n\n    _createClass(ToastNoAnimationModule, null, [{\n      key: \"forRoot\",\n      value: function forRoot() {\n        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return {\n          ngModule: ToastNoAnimationModule,\n          providers: [{\n            provide: TOAST_CONFIG,\n            useValue: {\n              default: DefaultNoAnimationsGlobalConfig,\n              config: config\n            }\n          }]\n        };\n      }\n    }]);\n\n    return ToastNoAnimationModule;\n  }();\n\n  ToastNoAnimationModule.ɵfac = function ToastNoAnimationModule_Factory(t) {\n    return new (t || ToastNoAnimationModule)();\n  };\n\n  ToastNoAnimationModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ToastNoAnimationModule\n  });\n  ToastNoAnimationModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule]\n  });\n  return ToastNoAnimationModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BasePortalHost, ComponentPortal, DefaultGlobalConfig, DefaultNoAnimationsGlobalConfig, DefaultNoComponentGlobalConfig, Overlay, OverlayContainer, OverlayRef, TOAST_CONFIG, Toast, ToastContainerDirective, ToastContainerModule, ToastInjector, ToastNoAnimation, ToastNoAnimationModule, ToastPackage, ToastRef, ToastrComponentlessModule, ToastrModule, ToastrService }; //# sourceMappingURL=ngx-toastr.mjs.map","map":null,"metadata":{},"sourceType":"module"}