{"ast":null,"code":"import _classCallCheck from \"C:/Repos/datingApp/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Repos/datingApp/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"C:/Repos/datingApp/client/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { Injectable, ElementRef, RendererFactory2 } from '@angular/core';\nimport { fromEvent, merge, of, animationFrameScheduler, Subject } from 'rxjs';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Get CSS computed property of the given element\n * @param {?} element\n * @param {?=} property\n * @return {?}\n */\n\nimport * as Éµngcc0 from '@angular/core';\n\nfunction getStyleComputedProperty(element, property) {\n  if (element.nodeType !== 1) {\n    return [];\n  } // NOTE: 1 DOM access here\n\n\n  var\n  /** @type {?} */\n  window = element.ownerDocument.defaultView;\n  var\n  /** @type {?} */\n  css = window.getComputedStyle(element, null);\n  return property ? css[property] : css;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Returns the parentNode or the host of the element\n * @param {?} element\n * @return {?}\n */\n\n\nfunction getParentNode(element) {\n  if (element.nodeName === 'HTML') {\n    return element;\n  }\n\n  return element.parentNode || element.host;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} element\n * @return {?}\n */\n\n\nfunction getScrollParent(element) {\n  // Return body, `getScroll` will take care to get the correct `scrollTop` from it\n  if (!element) {\n    return document.body;\n  }\n\n  switch (element.nodeName) {\n    case 'HTML':\n    case 'BODY':\n      return element.ownerDocument.body;\n\n    case '#document':\n      return element.body;\n\n    default:\n  } // Firefox want us to check `-x` and `-y` variations as well\n\n\n  var _getStyleComputedProp = getStyleComputedProperty(element),\n      overflow = _getStyleComputedProp.overflow,\n      overflowX = _getStyleComputedProp.overflowX,\n      overflowY = _getStyleComputedProp.overflowY;\n\n  if (/(auto|scroll|overlay)/.test(String(overflow) + String(overflowY) + String(overflowX))) {\n    return element;\n  }\n\n  return getScrollParent(getParentNode(element));\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar\n/** @type {?} */\nisBrowser = typeof window !== 'undefined' && typeof document !== 'undefined';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nvar\n/** @type {?} */\nisIE11 = isBrowser && !!(\n/** @type {?} */\nwindow.MSInputMethodContext &&\n/** @type {?} */\ndocument.documentMode);\nvar\n/** @type {?} */\nisIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);\n/**\n * @param {?=} version\n * @return {?}\n */\n\nfunction isIE(version) {\n  if (version === 11) {\n    return isIE11;\n  }\n\n  if (version === 10) {\n    return isIE10;\n  }\n\n  return isIE11 || isIE10;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} element\n * @return {?}\n */\n\n\nfunction getOffsetParent(element) {\n  if (!element) {\n    return document.documentElement;\n  }\n\n  var\n  /** @type {?} */\n  noOffsetParent = isIE(10) ? document.body : null; // NOTE: 1 DOM access here\n\n  var\n  /** @type {?} */\n  offsetParent = element.offsetParent || null; // Skip hidden elements which don't have an offsetParent\n\n  var\n  /** @type {?} */\n  sibling;\n\n  while (offsetParent === noOffsetParent && element.nextElementSibling) {\n    sibling = element.nextElementSibling;\n    offsetParent = sibling.offsetParent;\n  }\n\n  var\n  /** @type {?} */\n  nodeName = offsetParent && offsetParent.nodeName;\n\n  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {\n    return sibling ? sibling.ownerDocument.documentElement : document.documentElement;\n  } // .offsetParent will return the closest TH, TD or TABLE in case\n  // no offsetParent is present, I hate this job...\n\n\n  if (['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {\n    return getOffsetParent(offsetParent);\n  }\n\n  return offsetParent;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} element\n * @return {?}\n */\n\n\nfunction isOffsetContainer(element) {\n  var nodeName = element.nodeName;\n\n  if (nodeName === 'BODY') {\n    return false;\n  }\n\n  return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Finds the root node (document, shadowDOM root) of the given element\n * @param {?} node\n * @return {?}\n */\n\n\nfunction getRoot(node) {\n  if (node.parentNode !== null) {\n    return getRoot(node.parentNode);\n  }\n\n  return node;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} element1\n * @param {?} element2\n * @return {?}\n */\n\n\nfunction findCommonOffsetParent(element1, element2) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {\n    return document.documentElement;\n  } // Here we make sure to give as \"start\" the element that comes first in the DOM\n\n  /* tslint:disable-next-line: no-bitwise */\n\n\n  var\n  /** @type {?} */\n  order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;\n  var\n  /** @type {?} */\n  start = order ? element1 : element2;\n  var\n  /** @type {?} */\n  end = order ? element2 : element1; // Get common ancestor container\n\n  var\n  /** @type {?} */\n  range = document.createRange();\n  range.setStart(start, 0);\n  range.setEnd(end, 0);\n  var commonAncestorContainer = range.commonAncestorContainer; // Both nodes are inside #document\n\n  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {\n    if (isOffsetContainer(commonAncestorContainer)) {\n      return commonAncestorContainer;\n    }\n\n    return getOffsetParent(commonAncestorContainer);\n  } // one of the nodes is inside shadowDOM, find which one\n\n\n  var\n  /** @type {?} */\n  element1root = getRoot(element1);\n\n  if (element1root.host) {\n    return findCommonOffsetParent(element1root.host, element2);\n  } else {\n    return findCommonOffsetParent(element1, getRoot(element2).host);\n  }\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Helper to detect borders of a given element\n */\n\n/**\n * @param {?} styles\n * @param {?} axis\n * @return {?}\n */\n\n\nfunction getBordersSize(styles, axis) {\n  var\n  /** @type {?} */\n  sideA = axis === 'x' ? 'Left' : 'Top';\n  var\n  /** @type {?} */\n  sideB = sideA === 'Left' ? 'Right' : 'Bottom';\n  return parseFloat(styles[\"border\".concat(sideA, \"Width\")]) + parseFloat(styles[\"border\".concat(sideB, \"Width\")]);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} axis\n * @param {?} body\n * @param {?} html\n * @param {?} computedStyle\n * @return {?}\n */\n\n\nfunction getSize(axis, body, html, computedStyle) {\n  return Math.max(body[\"offset\".concat(axis)], body[\"scroll\".concat(axis)], html[\"client\".concat(axis)], html[\"offset\".concat(axis)], html[\"scroll\".concat(axis)], isIE(10) ? parseInt(html[\"offset\".concat(axis)], 10) + parseInt(computedStyle[\"margin\".concat(axis === 'Height' ? 'Top' : 'Left')], 10) + parseInt(computedStyle[\"margin\".concat(axis === 'Height' ? 'Bottom' : 'Right')], 10) : 0);\n}\n/**\n * @param {?} document\n * @return {?}\n */\n\n\nfunction getWindowSizes(document) {\n  var\n  /** @type {?} */\n  body = document.body;\n  var\n  /** @type {?} */\n  html = document.documentElement;\n  var\n  /** @type {?} */\n  computedStyle = isIE(10) && getComputedStyle(html);\n  return {\n    height: getSize('Height', body, html, computedStyle),\n    width: getSize('Width', body, html, computedStyle)\n  };\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Gets the scroll value of the given element in the given side (top and left)\n * @param {?} element\n * @param {?=} side\n * @return {?}\n */\n\n\nfunction getScroll(element) {\n  var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';\n  var\n  /** @type {?} */\n  upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';\n  var\n  /** @type {?} */\n  nodeName = element.nodeName;\n\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    var\n    /** @type {?} */\n    html = element.ownerDocument.documentElement;\n    var\n    /** @type {?} */\n    scrollingElement = element.ownerDocument.scrollingElement || html;\n    return scrollingElement[upperSide];\n  }\n\n  return element[upperSide];\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} offsets\n * @return {?}\n */\n\n\nfunction getClientRect(offsets) {\n  return Object.assign({}, offsets, {\n    right: offsets.left + offsets.width,\n    bottom: offsets.top + offsets.height\n  });\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} element\n * @return {?}\n */\n\n\nfunction getBoundingClientRect(element) {\n  var\n  /** @type {?} */\n  rect = {}; // IE10 10 FIX: Please, don't ask, the element isn't\n  // considered in DOM in some circumstances...\n  // This isn't reproducible in IE10 compatibility mode of IE11\n\n  try {\n    if (isIE(10)) {\n      rect = element.getBoundingClientRect();\n      var\n      /** @type {?} */\n      scrollTop = getScroll(element, 'top');\n      var\n      /** @type {?} */\n      scrollLeft = getScroll(element, 'left');\n      rect.top += scrollTop;\n      rect.left += scrollLeft;\n      rect.bottom += scrollTop;\n      rect.right += scrollLeft;\n    } else {\n      rect = element.getBoundingClientRect();\n    }\n  } catch (\n  /** @type {?} */\n  e) {\n    return undefined;\n  }\n\n  var\n  /** @type {?} */\n  result = {\n    left: rect.left,\n    top: rect.top,\n    width: rect.right - rect.left,\n    height: rect.bottom - rect.top\n  }; // subtract scrollbar size from sizes\n\n  var\n  /** @type {?} */\n  sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};\n  var\n  /** @type {?} */\n  width = sizes.width || element.clientWidth || result.right - result.left;\n  var\n  /** @type {?} */\n  height = sizes.height || element.clientHeight || result.bottom - result.top;\n  var\n  /** @type {?} */\n  horizScrollbar = element.offsetWidth - width;\n  var\n  /** @type {?} */\n  vertScrollbar = element.offsetHeight - height; // if an hypothetical scrollbar is detected, we must be sure it's not a `border`\n  // we make this check conditional for performance reasons\n\n  if (horizScrollbar || vertScrollbar) {\n    var\n    /** @type {?} */\n    styles = getStyleComputedProperty(element);\n    horizScrollbar -= getBordersSize(styles, 'x');\n    vertScrollbar -= getBordersSize(styles, 'y');\n    result.width -= horizScrollbar;\n    result.height -= vertScrollbar;\n  }\n\n  return getClientRect(result);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} rect\n * @param {?} element\n * @param {?=} subtract\n * @return {?}\n */\n\n\nfunction includeScroll(rect, element) {\n  var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var\n  /** @type {?} */\n  scrollTop = getScroll(element, 'top');\n  var\n  /** @type {?} */\n  scrollLeft = getScroll(element, 'left');\n  var\n  /** @type {?} */\n  modifier = subtract ? -1 : 1;\n  rect.top += scrollTop * modifier;\n  rect.bottom += scrollTop * modifier;\n  rect.left += scrollLeft * modifier;\n  rect.right += scrollLeft * modifier;\n  return rect;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} children\n * @param {?} parent\n * @param {?=} fixedPosition\n * @return {?}\n */\n\n\nfunction getOffsetRectRelativeToArbitraryNode(children, parent) {\n  var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var\n  /** @type {?} */\n  isIE10 = isIE(10);\n  var\n  /** @type {?} */\n  isHTML = parent.nodeName === 'HTML';\n  var\n  /** @type {?} */\n  childrenRect = getBoundingClientRect(children);\n  var\n  /** @type {?} */\n  parentRect = getBoundingClientRect(parent);\n  var\n  /** @type {?} */\n  scrollParent = getScrollParent(children);\n  var\n  /** @type {?} */\n  styles = getStyleComputedProperty(parent);\n  var\n  /** @type {?} */\n  borderTopWidth = parseFloat(styles.borderTopWidth);\n  var\n  /** @type {?} */\n  borderLeftWidth = parseFloat(styles.borderLeftWidth); // In cases where the parent is fixed, we must ignore negative scroll in offset calc\n\n  if (fixedPosition && isHTML) {\n    parentRect.top = Math.max(parentRect.top, 0);\n    parentRect.left = Math.max(parentRect.left, 0);\n  }\n\n  var\n  /** @type {?} */\n  offsets = getClientRect({\n    top: childrenRect.top - parentRect.top - borderTopWidth,\n    left: childrenRect.left - parentRect.left - borderLeftWidth,\n    width: childrenRect.width,\n    height: childrenRect.height\n  });\n  offsets.marginTop = 0;\n  offsets.marginLeft = 0; // Subtract margins of documentElement in case it's being used as parent\n  // we do this only on HTML because it's the only element that behaves\n  // differently when margins are applied to it. The margins are included in\n  // the box of the documentElement, in the other cases not.\n\n  if (!isIE10 && isHTML) {\n    var\n    /** @type {?} */\n    marginTop = parseFloat(styles.marginTop);\n    var\n    /** @type {?} */\n    marginLeft = parseFloat(styles.marginLeft);\n    offsets.top -= borderTopWidth - marginTop;\n    offsets.bottom -= borderTopWidth - marginTop;\n    offsets.left -= borderLeftWidth - marginLeft;\n    offsets.right -= borderLeftWidth - marginLeft; // Attach marginTop and marginLeft because in some circumstances we may need them\n\n    offsets.marginTop = marginTop;\n    offsets.marginLeft = marginLeft;\n  }\n\n  if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {\n    offsets = includeScroll(offsets, parent);\n  }\n\n  return offsets;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} element\n * @param {?=} excludeScroll\n * @return {?}\n */\n\n\nfunction getViewportOffsetRectRelativeToArtbitraryNode(element) {\n  var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var\n  /** @type {?} */\n  html = element.ownerDocument.documentElement;\n  var\n  /** @type {?} */\n  relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);\n  var\n  /** @type {?} */\n  width = Math.max(html.clientWidth, window.innerWidth || 0);\n  var\n  /** @type {?} */\n  height = Math.max(html.clientHeight, window.innerHeight || 0);\n  var\n  /** @type {?} */\n  scrollTop = !excludeScroll ? getScroll(html) : 0;\n  var\n  /** @type {?} */\n  scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;\n  var\n  /** @type {?} */\n  offset = {\n    top: scrollTop - Number(relativeOffset.top) + Number(relativeOffset.marginTop),\n    left: scrollLeft - Number(relativeOffset.left) + Number(relativeOffset.marginLeft),\n    width: width,\n    height: height\n  };\n  return getClientRect(offset);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} element\n * @return {?}\n */\n\n\nfunction isFixed(element) {\n  var\n  /** @type {?} */\n  nodeName = element.nodeName;\n\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    return false;\n  }\n\n  if (getStyleComputedProperty(element, 'position') === 'fixed') {\n    return true;\n  }\n\n  return isFixed(getParentNode(element));\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} element\n * @return {?}\n */\n\n\nfunction getFixedPositionOffsetParent(element) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element || !element.parentElement || isIE()) {\n    return document.documentElement;\n  }\n\n  var\n  /** @type {?} */\n  el = element.parentElement;\n\n  while (el && getStyleComputedProperty(el, 'transform') === 'none') {\n    el = el.parentElement;\n  }\n\n  return el || document.documentElement;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} target\n * @param {?} host\n * @param {?=} padding\n * @param {?=} boundariesElement\n * @param {?=} fixedPosition\n * @return {?}\n */\n\n\nfunction getBoundaries(target, host) {\n  var padding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var boundariesElement = arguments.length > 3 ? arguments[3] : undefined;\n  var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  // NOTE: 1 DOM access here\n  var\n  /** @type {?} */\n  boundaries = {\n    top: 0,\n    left: 0\n  };\n  var\n  /** @type {?} */\n  offsetParent = fixedPosition ? getFixedPositionOffsetParent(target) : findCommonOffsetParent(target, host); // Handle viewport case\n\n  if (boundariesElement === 'viewport') {\n    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);\n  } else {\n    // Handle other cases based on DOM element used as boundaries\n    var\n    /** @type {?} */\n    boundariesNode;\n\n    if (boundariesElement === 'scrollParent') {\n      boundariesNode = getScrollParent(getParentNode(host));\n\n      if (boundariesNode.nodeName === 'BODY') {\n        boundariesNode = target.ownerDocument.documentElement;\n      }\n    } else if (boundariesElement === 'window') {\n      boundariesNode = target.ownerDocument.documentElement;\n    } else {\n      boundariesNode = boundariesElement;\n    }\n\n    var\n    /** @type {?} */\n    offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition); // In case of HTML, we need a different computation\n\n    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {\n      var _getWindowSizes = getWindowSizes(target.ownerDocument),\n          height = _getWindowSizes.height,\n          width = _getWindowSizes.width;\n\n      boundaries.top += offsets.top - offsets.marginTop;\n      boundaries.bottom = Number(height) + Number(offsets.top);\n      boundaries.left += offsets.left - offsets.marginLeft;\n      boundaries.right = Number(width) + Number(offsets.left);\n    } else {\n      // for all the other DOM elements, this one is good\n      boundaries = offsets;\n    }\n  } // Add paddings\n\n\n  boundaries.left += padding;\n  boundaries.top += padding;\n  boundaries.right -= padding;\n  boundaries.bottom -= padding;\n  return boundaries;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} __0\n * @return {?}\n */\n\n\nfunction getArea(_ref) {\n  var width = _ref.width,\n      height = _ref.height;\n  return width * height;\n}\n/**\n * @param {?} placement\n * @param {?} refRect\n * @param {?} target\n * @param {?} host\n * @param {?} boundariesElement\n * @param {?=} padding\n * @return {?}\n */\n\n\nfunction computeAutoPlacement(placement, refRect, target, host, boundariesElement) {\n  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n\n  if (placement.indexOf('auto') === -1) {\n    return placement;\n  }\n\n  if (placement.indexOf('auto') !== -1 && (placement.indexOf('left') !== -1 || placement.indexOf('right') !== -1 || placement.indexOf('top') !== -1 || placement.indexOf('bottom') !== -1)) {\n    return placement.split(' ')[1] || '';\n  }\n\n  var\n  /** @type {?} */\n  boundaries = getBoundaries(target, host, padding, boundariesElement);\n  var\n  /** @type {?} */\n  rects = {\n    top: {\n      width: boundaries.width,\n      height: refRect.top - boundaries.top\n    },\n    right: {\n      width: boundaries.right - refRect.right,\n      height: boundaries.height\n    },\n    bottom: {\n      width: boundaries.width,\n      height: boundaries.bottom - refRect.bottom\n    },\n    left: {\n      width: refRect.left - boundaries.left,\n      height: boundaries.height\n    }\n  };\n  var\n  /** @type {?} */\n  sortedAreas = Object.keys(rects).map(function (key) {\n    return Object.assign({\n      key: key\n    }, rects[key], {\n      area: getArea(rects[key])\n    });\n  }).sort(function (a, b) {\n    return b.area - a.area;\n  });\n  var\n  /** @type {?} */\n  filteredAreas = sortedAreas.filter(function (_ref2) {\n    var width = _ref2.width,\n        height = _ref2.height;\n    return width >= target.clientWidth && height >= target.clientHeight;\n  });\n  var\n  /** @type {?} */\n  computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;\n  var\n  /** @type {?} */\n  variation = placement.split(' ')[1];\n  target.className = target.className.replace(/auto/g, computedPlacement);\n  return computedPlacement + (variation ? \"-\".concat(variation) : '');\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} data\n * @return {?}\n */\n\n\nfunction getOffsets(data) {\n  return {\n    width: data.offsets.target.width,\n    height: data.offsets.target.height,\n    left: Math.floor(data.offsets.target.left),\n    top: Math.round(data.offsets.target.top),\n    bottom: Math.round(data.offsets.target.bottom),\n    right: Math.floor(data.offsets.target.right)\n  };\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Get the opposite placement of the given one\n * @param {?} placement\n * @return {?}\n */\n\n\nfunction getOppositePlacement(placement) {\n  var\n  /** @type {?} */\n  hash = {\n    left: 'right',\n    right: 'left',\n    bottom: 'top',\n    top: 'bottom'\n  };\n  return placement.replace(/left|right|bottom|top/g, function (matched) {\n    return hash[matched];\n  });\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Get the opposite placement variation of the given one\n * @param {?} variation\n * @return {?}\n */\n\n\nfunction getOppositeVariation(variation) {\n  if (variation === 'right') {\n    return 'left';\n  } else if (variation === 'left') {\n    return 'right';\n  }\n\n  return variation;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Get the outer sizes of the given element (offset size + margins)\n * @param {?} element\n * @return {?}\n */\n\n\nfunction getOuterSizes(element) {\n  var\n  /** @type {?} */\n  window = element.ownerDocument.defaultView;\n  var\n  /** @type {?} */\n  styles = window.getComputedStyle(element);\n  var\n  /** @type {?} */\n  x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);\n  var\n  /** @type {?} */\n  y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);\n  return {\n    width: Number(element.offsetWidth) + y,\n    height: Number(element.offsetHeight) + x\n  };\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} target\n * @param {?} host\n * @param {?=} fixedPosition\n * @return {?}\n */\n\n\nfunction getReferenceOffsets(target, host) {\n  var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var\n  /** @type {?} */\n  commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(target) : findCommonOffsetParent(target, host);\n  return getOffsetRectRelativeToArbitraryNode(host, commonOffsetParent, fixedPosition);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} target\n * @param {?} hostOffsets\n * @param {?} position\n * @return {?}\n */\n\n\nfunction getTargetOffsets(target, hostOffsets, position) {\n  var\n  /** @type {?} */\n  placement = position.split(' ')[0]; // Get target node sizes\n\n  var\n  /** @type {?} */\n  targetRect = getOuterSizes(target); // Add position, width and height to our offsets object\n\n  var\n  /** @type {?} */\n  targetOffsets = {\n    width: targetRect.width,\n    height: targetRect.height\n  }; // depending by the target placement we have to compute its offsets slightly differently\n\n  var\n  /** @type {?} */\n  isHoriz = ['right', 'left'].indexOf(placement) !== -1;\n  var\n  /** @type {?} */\n  mainSide = isHoriz ? 'top' : 'left';\n  var\n  /** @type {?} */\n  secondarySide = isHoriz ? 'left' : 'top';\n  var\n  /** @type {?} */\n  measurement = isHoriz ? 'height' : 'width';\n  var\n  /** @type {?} */\n  secondaryMeasurement = !isHoriz ? 'height' : 'width';\n  targetOffsets[mainSide] = hostOffsets[mainSide] + hostOffsets[measurement] / 2 - targetRect[measurement] / 2;\n  targetOffsets[secondarySide] = placement === secondarySide ? hostOffsets[secondarySide] - targetRect[secondaryMeasurement] : hostOffsets[getOppositePlacement(secondarySide)];\n  return targetOffsets;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Tells if a given input is a number\n * @param {?} n\n * @return {?}\n */\n\n\nfunction isNumeric(n) {\n  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} data\n * @param {?=} renderer\n * @return {?}\n */\n\n\nfunction setAllStyles$$1(data, renderer) {\n  var\n  /** @type {?} */\n  target = data.instance.target;\n  var\n  /** @type {?} */\n  offsets = getOffsets(data);\n  setStyles(target, {\n    'will-change': 'transform',\n    top: '0px',\n    left: '0px',\n    transform: \"translate3d(\".concat(offsets.left, \"px, \").concat(offsets.top, \"px, 0px)\")\n  }, renderer);\n\n  if (data.instance.arrow) {\n    setStyles(data.instance.arrow, data.offsets.arrow, renderer);\n  }\n\n  if (data.placementAuto) {\n    if (renderer) {\n      renderer.setAttribute(target, 'class', target.className.replace(/bs-popover-auto/g, \"bs-popover-\".concat(data.placement)));\n      renderer.setAttribute(target, 'class', target.className.replace(/bs-tooltip-auto/g, \"bs-tooltip-\".concat(data.placement)));\n      renderer.setAttribute(target, 'class', target.className.replace(/\\sauto/g, \"s\".concat(data.placement)));\n\n      if (target.className.match(/popover/g)) {\n        renderer.addClass(target, 'popover-auto');\n      }\n\n      if (target.className.match(/tooltip/g)) {\n        renderer.addClass(target, 'tooltip-auto');\n      }\n    } else {\n      target.className = target.className.replace(/bs-popover-auto/g, \"bs-popover-\".concat(data.placement));\n      target.className = target.className.replace(/bs-tooltip-auto/g, \"bs-tooltip-\".concat(data.placement));\n      target.className = target.className.replace(/\\sauto/g, \"s\".concat(data.placement));\n\n      if (target.className.match(/popover/g)) {\n        target.classList.add('popover-auto');\n      }\n\n      if (target.className.match(/tooltip/g)) {\n        target.classList.add('tooltip-auto');\n      }\n    }\n  }\n\n  if (renderer) {\n    renderer.setAttribute(target, 'class', target.className.replace(/left|right|top|bottom/g, \"\".concat(data.placement)));\n  } else {\n    target.className = target.className.replace(/left|right|top|bottom/g, \"\".concat(data.placement));\n  }\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} element\n * @param {?} styles\n * @param {?=} renderer\n * @return {?}\n */\n\n\nfunction setStyles(element, styles, renderer) {\n  Object.keys(styles).forEach(function (prop) {\n    var\n    /** @type {?} */\n    unit = ''; // add unit if the value is numeric and is one of the following\n\n    if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {\n      unit = 'px';\n    }\n\n    if (renderer) {\n      renderer.setStyle(element, prop, \"\".concat(String(styles[prop])).concat(unit));\n      return;\n    }\n\n    element.style[prop] = String(styles[prop]) + unit;\n  });\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} data\n * @return {?}\n */\n\n\nfunction arrow(data) {\n  var _data$offsets$arrow;\n\n  var\n  /** @type {?} */\n  targetOffsets = data.offsets.target; // if arrowElement is a string, suppose it's a CSS selector\n\n  var\n  /** @type {?} */\n  arrowElement = data.instance.target.querySelector('.arrow'); // if arrowElement is not found, don't run the modifier\n\n  if (!arrowElement) {\n    return data;\n  }\n\n  var\n  /** @type {?} */\n  isVertical = ['left', 'right'].indexOf(data.placement) !== -1;\n  var\n  /** @type {?} */\n  len = isVertical ? 'height' : 'width';\n  var\n  /** @type {?} */\n  sideCapitalized = isVertical ? 'Top' : 'Left';\n  var\n  /** @type {?} */\n  side = sideCapitalized.toLowerCase();\n  var\n  /** @type {?} */\n  altSide = isVertical ? 'left' : 'top';\n  var\n  /** @type {?} */\n  opSide = isVertical ? 'bottom' : 'right';\n  var\n  /** @type {?} */\n  arrowElementSize = getOuterSizes(arrowElement)[len]; // top/left side\n\n  if (data.offsets.host[opSide] - arrowElementSize < targetOffsets[side]) {\n    targetOffsets[side] -= targetOffsets[side] - (data.offsets.host[opSide] - arrowElementSize);\n  } // bottom/right side\n\n\n  if (Number(data.offsets.host[side]) + Number(arrowElementSize) > targetOffsets[opSide]) {\n    targetOffsets[side] += Number(data.offsets.host[side]) + Number(arrowElementSize) - Number(targetOffsets[opSide]);\n  }\n\n  targetOffsets = getClientRect(targetOffsets); // compute center of the target\n\n  var\n  /** @type {?} */\n  center = Number(data.offsets.host[side]) + Number(data.offsets.host[len] / 2 - arrowElementSize / 2); // Compute the sideValue using the updated target offsets\n  // take target margin in account because we don't have this info available\n\n  var\n  /** @type {?} */\n  css = getStyleComputedProperty(data.instance.target);\n  var\n  /** @type {?} */\n  targetMarginSide = parseFloat(css[\"margin\".concat(sideCapitalized)]);\n  var\n  /** @type {?} */\n  targetBorderSide = parseFloat(css[\"border\".concat(sideCapitalized, \"Width\")]);\n  var\n  /** @type {?} */\n  sideValue = center - targetOffsets[side] - targetMarginSide - targetBorderSide; // prevent arrowElement from being placed not contiguously to its target\n\n  sideValue = Math.max(Math.min(targetOffsets[len] - arrowElementSize, sideValue), 0);\n  data.offsets.arrow = (_data$offsets$arrow = {}, _defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), _defineProperty(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);\n  data.instance.arrow = arrowElement;\n  return data;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} data\n * @return {?}\n */\n\n\nfunction flip(data) {\n  data.offsets.target = getClientRect(data.offsets.target);\n  var\n  /** @type {?} */\n  boundaries = getBoundaries(data.instance.target, data.instance.host, 0, // padding\n  'viewport', false // positionFixed\n  );\n  var\n  /** @type {?} */\n  placement = data.placement.split(' ')[0];\n  var\n  /** @type {?} */\n  variation = data.placement.split(' ')[1] || '';\n  var\n  /** @type {?} */\n  adaptivePosition = variation ? getOppositePlacement(placement) : computeAutoPlacement('auto', data.offsets.host, data.instance.target, data.instance.host, 'viewport', 0);\n  var\n  /** @type {?} */\n  flipOrder = [placement, adaptivePosition];\n  /* tslint:disable-next-line: cyclomatic-complexity */\n\n  flipOrder.forEach(function (step, index) {\n    if (placement !== step || flipOrder.length === index + 1) {\n      return data;\n    }\n\n    placement = data.placement.split(' ')[0]; // using floor because the host offsets may contain decimals we are not going to consider here\n\n    var\n    /** @type {?} */\n    overlapsRef = placement === 'left' && Math.floor(data.offsets.target.right) > Math.floor(data.offsets.host.left) || placement === 'right' && Math.floor(data.offsets.target.left) < Math.floor(data.offsets.host.right) || placement === 'top' && Math.floor(data.offsets.target.bottom) > Math.floor(data.offsets.host.top) || placement === 'bottom' && Math.floor(data.offsets.target.top) < Math.floor(data.offsets.host.bottom);\n    var\n    /** @type {?} */\n    overflowsLeft = Math.floor(data.offsets.target.left) < Math.floor(boundaries.left);\n    var\n    /** @type {?} */\n    overflowsRight = Math.floor(data.offsets.target.right) > Math.floor(boundaries.right);\n    var\n    /** @type {?} */\n    overflowsTop = Math.floor(data.offsets.target.top) < Math.floor(boundaries.top);\n    var\n    /** @type {?} */\n    overflowsBottom = Math.floor(data.offsets.target.bottom) > Math.floor(boundaries.bottom);\n    var\n    /** @type {?} */\n    overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom; // flip the variation if required\n\n    var\n    /** @type {?} */\n    isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n    var\n    /** @type {?} */\n    flippedVariation = isVertical && variation === 'left' && overflowsLeft || isVertical && variation === 'right' && overflowsRight || !isVertical && variation === 'left' && overflowsTop || !isVertical && variation === 'right' && overflowsBottom;\n\n    if (overlapsRef || overflowsBoundaries || flippedVariation) {\n      // this boolean to detect any flip loop\n      if (overlapsRef || overflowsBoundaries) {\n        placement = flipOrder[index + 1];\n      }\n\n      if (flippedVariation) {\n        variation = getOppositeVariation(variation);\n      }\n\n      data.placement = placement + (variation ? \" \".concat(variation) : '');\n      data.offsets.target = Object.assign({}, data.offsets.target, getTargetOffsets(data.instance.target, data.offsets.host, data.placement));\n    }\n  });\n  return data;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} targetElement\n * @param {?} hostElement\n * @param {?} position\n * @return {?}\n */\n\n\nfunction initData(targetElement, hostElement, position) {\n  var\n  /** @type {?} */\n  hostElPosition = getReferenceOffsets(targetElement, hostElement);\n  var\n  /** @type {?} */\n  targetOffset = getTargetOffsets(targetElement, hostElPosition, position);\n  var\n  /** @type {?} */\n  placement = computeAutoPlacement(position, hostElPosition, targetElement, hostElement, 'viewport', 0);\n  var\n  /** @type {?} */\n  placementAuto = position.indexOf('auto') !== -1;\n  return {\n    instance: {\n      target: targetElement,\n      host: hostElement,\n      arrow: null\n    },\n    offsets: {\n      target: targetOffset,\n      host: hostElPosition,\n      arrow: null\n    },\n    positionFixed: false,\n    placement: placement,\n    placementAuto: placementAuto\n  };\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} data\n * @return {?}\n */\n\n\nfunction preventOverflow(data) {\n  // NOTE: DOM access here\n  // resets the targetOffsets's position so that the document size can be calculated excluding\n  // the size of the targetOffsets element itself\n  var\n  /** @type {?} */\n  transformProp = 'transform';\n  var\n  /** @type {?} */\n  targetStyles = data.instance.target.style; // assignment to help minification\n\n  var top = targetStyles.top,\n      left = targetStyles.left,\n      transform = targetStyles[transformProp];\n  targetStyles.top = '';\n  targetStyles.left = '';\n  targetStyles[transformProp] = '';\n  var\n  /** @type {?} */\n  boundaries = getBoundaries(data.instance.target, data.instance.host, 0, // padding\n  'scrollParent', false // positionFixed\n  ); // NOTE: DOM access here\n  // restores the original style properties after the offsets have been computed\n\n  targetStyles.top = top;\n  targetStyles.left = left;\n  targetStyles[transformProp] = transform;\n  var\n  /** @type {?} */\n  order = ['left', 'right', 'top', 'bottom'];\n  var\n  /** @type {?} */\n  check = {\n    /**\n     * @param {?} placement\n     * @return {?}\n     */\n    primary: function primary(placement) {\n      var\n      /** @type {?} */\n      value = data.offsets.target[placement];\n\n      if (data.offsets.target[placement] < boundaries[placement] && !false // options.escapeWithReference\n      ) {\n        value = Math.max(data.offsets.target[placement], boundaries[placement]);\n      }\n\n      return _defineProperty({}, placement, value);\n    },\n\n    /**\n     * @param {?} placement\n     * @return {?}\n     */\n    secondary: function secondary(placement) {\n      var\n      /** @type {?} */\n      mainSide = placement === 'right' ? 'left' : 'top';\n      var\n      /** @type {?} */\n      value = data.offsets.target[mainSide];\n\n      if (data.offsets.target[placement] > boundaries[placement] && !false // escapeWithReference\n      ) {\n        value = Math.min(data.offsets.target[mainSide], boundaries[placement] - (placement === 'right' ? data.offsets.target.width : data.offsets.target.height));\n      }\n\n      return _defineProperty({}, mainSide, value);\n    }\n  };\n  var\n  /** @type {?} */\n  side;\n  order.forEach(function (placement) {\n    side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';\n    data.offsets.target = Object.assign({}, data.offsets.target, check[side](placement));\n  });\n  return data;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?} data\n * @return {?}\n */\n\n\nfunction shift(data) {\n  var\n  /** @type {?} */\n  placement = data.placement;\n  var\n  /** @type {?} */\n  basePlacement = placement.split(' ')[0];\n  var\n  /** @type {?} */\n  shiftvariation = placement.split(' ')[1];\n\n  if (shiftvariation) {\n    var _data$offsets = data.offsets,\n        host = _data$offsets.host,\n        target = _data$offsets.target;\n    var\n    /** @type {?} */\n    isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;\n    var\n    /** @type {?} */\n    side = isVertical ? 'left' : 'top';\n    var\n    /** @type {?} */\n    measurement = isVertical ? 'width' : 'height';\n    var\n    /** @type {?} */\n    shiftOffsets = {\n      left: _defineProperty({}, side, host[side]),\n      right: _defineProperty({}, side, host[side] + host[measurement] - host[measurement])\n    };\n    data.offsets.target = Object.assign({}, target, shiftOffsets[shiftvariation]);\n  }\n\n  return data;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar Positioning = /*#__PURE__*/function () {\n  function Positioning() {\n    _classCallCheck(this, Positioning);\n  }\n\n  _createClass(Positioning, [{\n    key: \"position\",\n    value:\n    /**\n     * @param {?} hostElement\n     * @param {?} targetElement\n     * @param {?=} round\n     * @return {?}\n     */\n    function position(hostElement, targetElement) {\n      var round = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      return this.offset(hostElement, targetElement, false);\n    }\n    /**\n     * @param {?} hostElement\n     * @param {?} targetElement\n     * @param {?=} round\n     * @return {?}\n     */\n\n  }, {\n    key: \"offset\",\n    value: function offset(hostElement, targetElement) {\n      var round = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      return getReferenceOffsets(targetElement, hostElement);\n    }\n    /**\n     * @param {?} hostElement\n     * @param {?} targetElement\n     * @param {?} position\n     * @param {?=} appendToBody\n     * @return {?}\n     */\n\n  }, {\n    key: \"positionElements\",\n    value: function positionElements(hostElement, targetElement, position, appendToBody) {\n      var\n      /** @type {?} */\n      chainOfModifiers = [flip, shift, preventOverflow, arrow];\n      return chainOfModifiers.reduce(function (modifiedData, modifier) {\n        return modifier(modifiedData);\n      }, initData(targetElement, hostElement, position));\n    }\n  }]);\n\n  return Positioning;\n}();\n\nvar\n/** @type {?} */\npositionService = new Positioning();\n/**\n * @param {?} hostElement\n * @param {?} targetElement\n * @param {?} placement\n * @param {?=} appendToBody\n * @param {?=} renderer\n * @return {?}\n */\n\nfunction positionElements(hostElement, targetElement, placement, appendToBody, renderer) {\n  var\n  /** @type {?} */\n  data = positionService.positionElements(hostElement, targetElement, placement, appendToBody);\n  setAllStyles$$1(data, renderer);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar PositioningService = /*#__PURE__*/(function () {\n  var PositioningService = /*#__PURE__*/function () {\n    /**\n     * @param {?} rendererFactory\n     */\n    function PositioningService(rendererFactory) {\n      var _this = this;\n\n      _classCallCheck(this, PositioningService);\n\n      this.update$$ = new Subject();\n      this.events$ = merge(fromEvent(window, 'scroll'), fromEvent(window, 'resize'), of(0, animationFrameScheduler), this.update$$);\n      this.positionElements = new Map();\n      this.events$.subscribe(function () {\n        _this.positionElements.forEach(function (positionElement) {\n          positionElements(_getHtmlElement(positionElement.target), _getHtmlElement(positionElement.element), positionElement.attachment, positionElement.appendToBody, rendererFactory.createRenderer(null, null));\n        });\n      });\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n\n\n    _createClass(PositioningService, [{\n      key: \"position\",\n      value: function position(options) {\n        this.addPositionElement(options);\n        this.update$$.next();\n      }\n      /**\n       * @param {?} options\n       * @return {?}\n       */\n\n    }, {\n      key: \"addPositionElement\",\n      value: function addPositionElement(options) {\n        this.positionElements.set(_getHtmlElement(options.element), options);\n      }\n      /**\n       * @param {?} elRef\n       * @return {?}\n       */\n\n    }, {\n      key: \"deletePositionElement\",\n      value: function deletePositionElement(elRef) {\n        this.positionElements.delete(_getHtmlElement(elRef));\n      }\n    }]);\n\n    return PositioningService;\n  }();\n\n  PositioningService.Éµfac = function PositioningService_Factory(t) {\n    return new (t || PositioningService)(Éµngcc0.ÉµÉµinject(Éµngcc0.RendererFactory2));\n  };\n\n  PositioningService.Éµprov = /*@__PURE__*/Éµngcc0.ÉµÉµdefineInjectable({\n    token: PositioningService,\n    factory: PositioningService.Éµfac\n  });\n  /** @nocollapse */\n\n  return PositioningService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @param {?} element\n * @return {?}\n */\n\n\nfunction _getHtmlElement(element) {\n  // it means that we got a selector\n  if (typeof element === 'string') {\n    return document.querySelector(element);\n  }\n\n  if (element instanceof ElementRef) {\n    return element.nativeElement;\n  }\n\n  return element;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nexport { positionElements, Positioning, PositioningService }; //# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":null,"metadata":{},"sourceType":"module"}