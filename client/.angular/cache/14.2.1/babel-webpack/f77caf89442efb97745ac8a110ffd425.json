{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Repos/datingApp/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _createClass from \"C:/Repos/datingApp/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Repos/datingApp/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport { Injectable, EventEmitter, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, Renderer2, Directive, Input, Output, ViewContainerRef, TemplateRef, HostBinding, HostListener, NgModule } from '@angular/core';\nimport { isBs3 } from 'ngx-bootstrap/utils';\nimport { filter } from 'rxjs/operators';\nimport { ComponentLoaderFactory } from 'ngx-bootstrap/component-loader';\nimport { PositioningService } from 'ngx-bootstrap/positioning';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Default dropdown configuration\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'ngx-bootstrap/component-loader';\nvar _c0 = [\"*\"];\nvar BsDropdownConfig = /*#__PURE__*/(function () {\n  var BsDropdownConfig = /*#__PURE__*/_createClass(function BsDropdownConfig() {\n    _classCallCheck(this, BsDropdownConfig);\n\n    /**\n     * default dropdown auto closing behavior\n     */\n    this.autoClose = true;\n    /**\n     * default dropdown auto closing behavior\n     */\n\n    this.insideClick = false;\n  });\n\n  BsDropdownConfig.ɵfac = function BsDropdownConfig_Factory(t) {\n    return new (t || BsDropdownConfig)();\n  };\n\n  BsDropdownConfig.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: BsDropdownConfig,\n    factory: BsDropdownConfig.ɵfac\n  });\n  return BsDropdownConfig;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar BsDropdownState = /*#__PURE__*/(function () {\n  var BsDropdownState = /*#__PURE__*/_createClass(function BsDropdownState() {\n    var _this = this;\n\n    _classCallCheck(this, BsDropdownState);\n\n    this.direction = 'down';\n    this.isOpenChange = new EventEmitter();\n    this.isDisabledChange = new EventEmitter();\n    this.toggleClick = new EventEmitter();\n    this.dropdownMenu = new Promise(function (resolve) {\n      _this.resolveDropdownMenu = resolve;\n    });\n  });\n\n  BsDropdownState.ɵfac = function BsDropdownState_Factory(t) {\n    return new (t || BsDropdownState)();\n  };\n\n  BsDropdownState.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: BsDropdownState,\n    factory: BsDropdownState.ɵfac\n  });\n  /** @nocollapse */\n\n  return BsDropdownState;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar BsDropdownContainerComponent = /*#__PURE__*/(function () {\n  var BsDropdownContainerComponent = /*#__PURE__*/function () {\n    /**\n     * @param {?} _state\n     * @param {?} cd\n     * @param {?} _renderer\n     * @param {?} _element\n     */\n    function BsDropdownContainerComponent(_state, cd, _renderer, _element) {\n      var _this2 = this;\n\n      _classCallCheck(this, BsDropdownContainerComponent);\n\n      this._state = _state;\n      this.cd = cd;\n      this._renderer = _renderer;\n      this._element = _element;\n      this.isOpen = false;\n      this._subscription = _state.isOpenChange.subscribe(function (value) {\n        _this2.isOpen = value;\n\n        var\n        /** @type {?} */\n        dropdown = _this2._element.nativeElement.querySelector('.dropdown-menu');\n\n        if (dropdown && !isBs3()) {\n          _this2._renderer.addClass(dropdown, 'show');\n\n          if (dropdown.classList.contains('dropdown-menu-right')) {\n            _this2._renderer.setStyle(dropdown, 'left', 'auto');\n\n            _this2._renderer.setStyle(dropdown, 'right', '0');\n          }\n\n          if (_this2.direction === 'up') {\n            _this2._renderer.setStyle(dropdown, 'top', 'auto');\n\n            _this2._renderer.setStyle(dropdown, 'transform', 'translateY(-101%)');\n          }\n        }\n\n        _this2.cd.markForCheck();\n\n        _this2.cd.detectChanges();\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _createClass(BsDropdownContainerComponent, [{\n      key: \"direction\",\n      get: function get() {\n        return this._state.direction;\n      }\n      /**\n       * \\@internal\n       * @param {?} el\n       * @return {?}\n       */\n\n    }, {\n      key: \"_contains\",\n      value: function _contains(el) {\n        return this._element.nativeElement.contains(el);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._subscription.unsubscribe();\n      }\n    }]);\n\n    return BsDropdownContainerComponent;\n  }();\n\n  BsDropdownContainerComponent.ɵfac = function BsDropdownContainerComponent_Factory(t) {\n    return new (t || BsDropdownContainerComponent)(ɵngcc0.ɵɵdirectiveInject(BsDropdownState), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  BsDropdownContainerComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: BsDropdownContainerComponent,\n    selectors: [[\"bs-dropdown-container\"]],\n    hostAttrs: [2, \"display\", \"block\", \"position\", \"absolute\"],\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 8,\n    template: function BsDropdownContainerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\");\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"dropup\", ctx.direction === \"up\")(\"dropdown\", ctx.direction === \"down\")(\"show\", ctx.isOpen)(\"open\", ctx.isOpen);\n      }\n    },\n    dependencies: function dependencies() {\n      return [BsDropdownDirective];\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return BsDropdownContainerComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar BsDropdownDirective = /*#__PURE__*/(function () {\n  var BsDropdownDirective = /*#__PURE__*/function () {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _renderer\n     * @param {?} _viewContainerRef\n     * @param {?} _cis\n     * @param {?} _config\n     * @param {?} _state\n     */\n    function BsDropdownDirective(_elementRef, _renderer, _viewContainerRef, _cis, _config, _state) {\n      _classCallCheck(this, BsDropdownDirective);\n\n      this._elementRef = _elementRef;\n      this._renderer = _renderer;\n      this._viewContainerRef = _viewContainerRef;\n      this._cis = _cis;\n      this._config = _config;\n      this._state = _state;\n      this._isInlineOpen = false;\n      this._subscriptions = [];\n      this._isInited = false; // set initial dropdown state from config\n\n      this._state.autoClose = this._config.autoClose;\n      this._state.insideClick = this._config.insideClick; // create dropdown component loader\n\n      this._dropdown = this._cis.createLoader(this._elementRef, this._viewContainerRef, this._renderer).provide({\n        provide: BsDropdownState,\n        useValue: this._state\n      });\n      this.onShown = this._dropdown.onShown;\n      this.onHidden = this._dropdown.onHidden;\n      this.isOpenChange = this._state.isOpenChange;\n    }\n    /**\n     * Indicates that dropdown will be closed on item or document click,\n     * and after pressing ESC\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    _createClass(BsDropdownDirective, [{\n      key: \"autoClose\",\n      get:\n      /**\n       * @return {?}\n       */\n      function get() {\n        return this._state.autoClose;\n      }\n      /**\n       * This attribute indicates that the dropdown shouldn't close on inside click when autoClose is set to true\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._state.autoClose = value;\n      }\n    }, {\n      key: \"insideClick\",\n      get:\n      /**\n       * @return {?}\n       */\n      function get() {\n        return this._state.insideClick;\n      }\n      /**\n       * Disables dropdown toggle and hides dropdown menu if opened\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._state.insideClick = value;\n      }\n    }, {\n      key: \"isDisabled\",\n      get:\n      /**\n       * @return {?}\n       */\n      function get() {\n        return this._isDisabled;\n      }\n      /**\n       * Returns whether or not the popover is currently being shown\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._isDisabled = value;\n\n        this._state.isDisabledChange.emit(value);\n\n        if (value) {\n          this.hide();\n        }\n      }\n    }, {\n      key: \"isOpen\",\n      get: function get() {\n        if (this._showInline) {\n          return this._isInlineOpen;\n        }\n\n        return this._dropdown.isShown;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        if (value) {\n          this.show();\n        } else {\n          this.hide();\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"isBs4\",\n      get: function get() {\n        return !isBs3();\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_showInline\",\n      get: function get() {\n        return !this.container;\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        var _this3 = this;\n\n        // fix: seems there are an issue with `routerLinkActive`\n        // which result in duplicated call ngOnInit without call to ngOnDestroy\n        // read more: https://github.com/valor-software/ngx-bootstrap/issues/1885\n        if (this._isInited) {\n          return;\n        }\n\n        this._isInited = true; // attach DOM listeners\n\n        this._dropdown.listen({\n          // because of dropdown inline mode\n          outsideClick: false,\n          triggers: this.triggers,\n          show: function show() {\n            return _this3.show();\n          }\n        }); // toggle visibility on toggle element click\n\n\n        this._subscriptions.push(this._state.toggleClick.subscribe(function (value) {\n          return _this3.toggle(value);\n        })); // hide dropdown if set disabled while opened\n\n\n        this._subscriptions.push(this._state.isDisabledChange.pipe(filter(function (value) {\n          return value;\n        })).subscribe(function (value) {\n          return _this3.hide();\n        }));\n      }\n      /**\n       * Opens an element’s popover. This is considered a “manual” triggering of\n       * the popover.\n       * @return {?}\n       */\n\n    }, {\n      key: \"show\",\n      value: function show() {\n        var _this4 = this;\n\n        if (this.isOpen || this.isDisabled) {\n          return;\n        }\n\n        if (this._showInline) {\n          if (!this._inlinedMenu) {\n            this._state.dropdownMenu.then(function (dropdownMenu) {\n              _this4._dropdown.attachInline(dropdownMenu.viewContainer, dropdownMenu.templateRef);\n\n              _this4._inlinedMenu = _this4._dropdown._inlineViewRef;\n\n              _this4.addBs4Polyfills();\n            }).catch();\n          }\n\n          this.addBs4Polyfills();\n          this._isInlineOpen = true;\n          this.onShown.emit(true);\n\n          this._state.isOpenChange.emit(true);\n\n          return;\n        }\n\n        this._state.dropdownMenu.then(function (dropdownMenu) {\n          // check direction in which dropdown should be opened\n          var\n          /** @type {?} */\n          _dropup = _this4.dropup || typeof _this4.dropup !== 'undefined' && _this4.dropup;\n\n          _this4._state.direction = _dropup ? 'up' : 'down';\n\n          var\n          /** @type {?} */\n          _placement = _this4.placement || (_dropup ? 'top left' : 'bottom left'); // show dropdown\n\n\n          _this4._dropdown.attach(BsDropdownContainerComponent).to(_this4.container).position({\n            attachment: _placement\n          }).show({\n            content: dropdownMenu.templateRef,\n            placement: _placement\n          });\n\n          _this4._state.isOpenChange.emit(true);\n        }).catch();\n      }\n      /**\n       * Closes an element’s popover. This is considered a “manual” triggering of\n       * the popover.\n       * @return {?}\n       */\n\n    }, {\n      key: \"hide\",\n      value: function hide() {\n        if (!this.isOpen) {\n          return;\n        }\n\n        if (this._showInline) {\n          this.removeShowClass();\n          this.removeDropupStyles();\n          this._isInlineOpen = false;\n          this.onHidden.emit(true);\n        } else {\n          this._dropdown.hide();\n        }\n\n        this._state.isOpenChange.emit(false);\n      }\n      /**\n       * Toggles an element’s popover. This is considered a “manual” triggering of\n       * the popover. With parameter <code>true</code> allows toggling, with parameter <code>false</code>\n       * only hides opened dropdown. Parameter usage will be removed in ngx-bootstrap v3\n       * @param {?=} value\n       * @return {?}\n       */\n\n    }, {\n      key: \"toggle\",\n      value: function toggle(value) {\n        if (this.isOpen || !value) {\n          return this.hide();\n        }\n\n        return this.show();\n      }\n      /**\n       * \\@internal\n       * @param {?} event\n       * @return {?}\n       */\n\n    }, {\n      key: \"_contains\",\n      value: function _contains(event) {\n        return this._elementRef.nativeElement.contains(event.target) || this._dropdown.instance && this._dropdown.instance._contains(event.target);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        // clean up subscriptions and destroy dropdown\n        var _iterator = _createForOfIteratorHelper(this._subscriptions),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var sub = _step.value;\n            sub.unsubscribe();\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        this._dropdown.dispose();\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"addBs4Polyfills\",\n      value: function addBs4Polyfills() {\n        if (!isBs3()) {\n          this.addShowClass();\n          this.checkRightAlignment();\n          this.addDropupStyles();\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"addShowClass\",\n      value: function addShowClass() {\n        if (this._inlinedMenu && this._inlinedMenu.rootNodes[0]) {\n          this._renderer.addClass(this._inlinedMenu.rootNodes[0], 'show');\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"removeShowClass\",\n      value: function removeShowClass() {\n        if (this._inlinedMenu && this._inlinedMenu.rootNodes[0]) {\n          this._renderer.removeClass(this._inlinedMenu.rootNodes[0], 'show');\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"checkRightAlignment\",\n      value: function checkRightAlignment() {\n        if (this._inlinedMenu && this._inlinedMenu.rootNodes[0]) {\n          var\n          /** @type {?} */\n          isRightAligned = this._inlinedMenu.rootNodes[0].classList.contains('dropdown-menu-right');\n\n          this._renderer.setStyle(this._inlinedMenu.rootNodes[0], 'left', isRightAligned ? 'auto' : '0');\n\n          this._renderer.setStyle(this._inlinedMenu.rootNodes[0], 'right', isRightAligned ? '0' : 'auto');\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"addDropupStyles\",\n      value: function addDropupStyles() {\n        if (this._inlinedMenu && this._inlinedMenu.rootNodes[0]) {\n          // a little hack to not break support of bootstrap 4 beta\n          this._renderer.setStyle(this._inlinedMenu.rootNodes[0], 'top', this.dropup ? 'auto' : '100%');\n\n          this._renderer.setStyle(this._inlinedMenu.rootNodes[0], 'transform', this.dropup ? 'translateY(-101%)' : 'translateY(0)');\n\n          this._renderer.setStyle(this._inlinedMenu.rootNodes[0], 'bottom', 'auto');\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"removeDropupStyles\",\n      value: function removeDropupStyles() {\n        if (this._inlinedMenu && this._inlinedMenu.rootNodes[0]) {\n          this._renderer.removeStyle(this._inlinedMenu.rootNodes[0], 'top');\n\n          this._renderer.removeStyle(this._inlinedMenu.rootNodes[0], 'transform');\n\n          this._renderer.removeStyle(this._inlinedMenu.rootNodes[0], 'bottom');\n        }\n      }\n    }]);\n\n    return BsDropdownDirective;\n  }();\n\n  BsDropdownDirective.ɵfac = function BsDropdownDirective_Factory(t) {\n    return new (t || BsDropdownDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ComponentLoaderFactory), ɵngcc0.ɵɵdirectiveInject(BsDropdownConfig), ɵngcc0.ɵɵdirectiveInject(BsDropdownState));\n  };\n\n  BsDropdownDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: BsDropdownDirective,\n    selectors: [[\"\", \"bsDropdown\", \"\"], [\"\", \"dropdown\", \"\"]],\n    hostVars: 6,\n    hostBindings: function BsDropdownDirective_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"dropup\", ctx.dropup)(\"open\", ctx.isOpen)(\"show\", ctx.isOpen && ctx.isBs4);\n      }\n    },\n    inputs: {\n      autoClose: \"autoClose\",\n      insideClick: \"insideClick\",\n      isDisabled: \"isDisabled\",\n      isOpen: \"isOpen\",\n      placement: \"placement\",\n      triggers: \"triggers\",\n      container: \"container\",\n      dropup: \"dropup\"\n    },\n    outputs: {\n      onShown: \"onShown\",\n      onHidden: \"onHidden\",\n      isOpenChange: \"isOpenChange\"\n    },\n    exportAs: [\"bs-dropdown\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([BsDropdownState])]\n  });\n  /** @nocollapse */\n\n  return BsDropdownDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar BsDropdownMenuDirective = /*#__PURE__*/(function () {\n  var BsDropdownMenuDirective = /*#__PURE__*/_createClass(\n  /**\n   * @param {?} _state\n   * @param {?} _viewContainer\n   * @param {?} _templateRef\n   */\n  function BsDropdownMenuDirective(_state, _viewContainer, _templateRef) {\n    _classCallCheck(this, BsDropdownMenuDirective);\n\n    _state.resolveDropdownMenu({\n      templateRef: _templateRef,\n      viewContainer: _viewContainer\n    });\n  });\n\n  BsDropdownMenuDirective.ɵfac = function BsDropdownMenuDirective_Factory(t) {\n    return new (t || BsDropdownMenuDirective)(ɵngcc0.ɵɵdirectiveInject(BsDropdownState), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n  };\n\n  BsDropdownMenuDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: BsDropdownMenuDirective,\n    selectors: [[\"\", \"bsDropdownMenu\", \"\"], [\"\", \"dropdownMenu\", \"\"]],\n    exportAs: [\"bs-dropdown-menu\"]\n  });\n  /** @nocollapse */\n\n  return BsDropdownMenuDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar BsDropdownToggleDirective = /*#__PURE__*/(function () {\n  var BsDropdownToggleDirective = /*#__PURE__*/function () {\n    /**\n     * @param {?} _state\n     * @param {?} _element\n     * @param {?} dropdown\n     */\n    function BsDropdownToggleDirective(_state, _element, dropdown) {\n      var _this5 = this;\n\n      _classCallCheck(this, BsDropdownToggleDirective);\n\n      this._state = _state;\n      this._element = _element;\n      this.dropdown = dropdown;\n      this.isDisabled = null;\n      this._subscriptions = []; // sync is open value with state\n\n      this._subscriptions.push(this._state.isOpenChange.subscribe(function (value) {\n        return _this5.isOpen = value;\n      })); // populate disabled state\n\n\n      this._subscriptions.push(this._state.isDisabledChange.subscribe(function (value) {\n        return _this5.isDisabled = value || null;\n      }));\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _createClass(BsDropdownToggleDirective, [{\n      key: \"onClick\",\n      value: function onClick() {\n        if (this.isDisabled) {\n          return;\n        }\n\n        this._state.toggleClick.emit(true);\n      }\n      /**\n       * @param {?} event\n       * @return {?}\n       */\n\n    }, {\n      key: \"onDocumentClick\",\n      value: function onDocumentClick(event) {\n        if (this._state.autoClose && event.button !== 2 && !this._element.nativeElement.contains(event.target) && !(this._state.insideClick && this.dropdown._contains(event))) {\n          this._state.toggleClick.emit(false);\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"onEsc\",\n      value: function onEsc() {\n        if (this._state.autoClose) {\n          this._state.toggleClick.emit(false);\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        var _iterator2 = _createForOfIteratorHelper(this._subscriptions),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var sub = _step2.value;\n            sub.unsubscribe();\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n    }]);\n\n    return BsDropdownToggleDirective;\n  }();\n\n  BsDropdownToggleDirective.ɵfac = function BsDropdownToggleDirective_Factory(t) {\n    return new (t || BsDropdownToggleDirective)(ɵngcc0.ɵɵdirectiveInject(BsDropdownState), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(BsDropdownDirective));\n  };\n\n  BsDropdownToggleDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: BsDropdownToggleDirective,\n    selectors: [[\"\", \"bsDropdownToggle\", \"\"], [\"\", \"dropdownToggle\", \"\"]],\n    hostVars: 3,\n    hostBindings: function BsDropdownToggleDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function BsDropdownToggleDirective_click_HostBindingHandler() {\n          return ctx.onClick();\n        })(\"click\", function BsDropdownToggleDirective_click_HostBindingHandler($event) {\n          return ctx.onDocumentClick($event);\n        }, false, ɵngcc0.ɵɵresolveDocument)(\"keyup.esc\", function BsDropdownToggleDirective_keyup_esc_HostBindingHandler() {\n          return ctx.onEsc();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-haspopup\", true)(\"disabled\", ctx.isDisabled)(\"aria-expanded\", ctx.isOpen);\n      }\n    },\n    exportAs: [\"bs-dropdown-toggle\"]\n  });\n  /** @nocollapse */\n\n  return BsDropdownToggleDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar BsDropdownModule = /*#__PURE__*/(function () {\n  var BsDropdownModule = /*#__PURE__*/function () {\n    function BsDropdownModule() {\n      _classCallCheck(this, BsDropdownModule);\n    }\n\n    _createClass(BsDropdownModule, null, [{\n      key: \"forRoot\",\n      value:\n      /**\n       * @param {?=} config\n       * @return {?}\n       */\n      function forRoot(config) {\n        return {\n          ngModule: BsDropdownModule,\n          providers: [ComponentLoaderFactory, PositioningService, BsDropdownState, {\n            provide: BsDropdownConfig,\n            useValue: config ? config : {\n              autoClose: true,\n              insideClick: false\n            }\n          }]\n        };\n      }\n    }]);\n\n    return BsDropdownModule;\n  }();\n\n  BsDropdownModule.ɵfac = function BsDropdownModule_Factory(t) {\n    return new (t || BsDropdownModule)();\n  };\n\n  BsDropdownModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: BsDropdownModule\n  });\n  BsDropdownModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return BsDropdownModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(BsDropdownModule, {\n    declarations: [BsDropdownMenuDirective, BsDropdownToggleDirective, BsDropdownContainerComponent, BsDropdownDirective],\n    exports: [BsDropdownMenuDirective, BsDropdownToggleDirective, BsDropdownDirective]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nexport { BsDropdownDirective, BsDropdownMenuDirective, BsDropdownToggleDirective, BsDropdownContainerComponent, BsDropdownState, BsDropdownConfig, BsDropdownModule }; //# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":null,"metadata":{},"sourceType":"module"}